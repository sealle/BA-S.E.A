{"version":3,"file":"2.js","sources":["webpack:///./components/VideoChatUser.js","webpack:///./ethereum/src/contract.js","webpack:///./ethereum/src/web3.js","webpack:///./routes.js","webpack:///./utils/CookieUtils.js","webpack:///./webrtc/MediaHandler.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\nimport { setCookie } from \"../utils/CookieUtils\";\nimport OtpInput from \"react-otp-input\";\nimport RecordRTC from \"recordrtc\";\nconst StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\nimport web3 from \"../ethereum/src/web3\";\nimport contract from \"../ethereum/src/contract\";\nimport {\n  Message,\n  Segment,\n  Button,\n  Container,\n  Dimmer,\n  Loader\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Router } from \"../routes\";\nimport swal from \"sweetalert2\";\nimport { MultiStreamsMixer } from \"multistreamsmixer\";\nlet xsrfToken = \"\";\nlet pusher;\nlet peer;\nlet channelName;\nlet userName;\nlet userNames = [];\nlet recordRTC;\nlet firstMember;\n\n//User's videochat\nexport default class VideoChat extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasMedia: false,\n      userName: \"\",\n      message: \"\",\n      isConnected: false,\n      disableButton: true,\n      isRecording: \"\"\n    };\n\n    //create object of user\n    this.currentUser = {\n      id: \"\",\n      stream: undefined\n    };\n\n    this.peers = [];\n\n    this.mediaHandler = new MediaHandler();\n  }\n\n  async componentWillMount() {\n    //request user data from server\n    try {\n      const response = await axios.post(\n        window.location.origin + \"/videochat/stream\"\n      );\n      this.setState({\n        userName: response.data.currentUser\n      });\n      this.currentUser.id = this.state.userName;\n      xsrfToken = response.data.token;\n    } catch (e) {\n      console.log(e);\n    }\n\n    //ask for permission to allow microphone and webcam\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n    this.setupPusher();\n    return;\n  }\n\n  //setting up pusher API\n  setupPusher = () => {\n    //log pusher to console\n    //Pusher.logToConsole = true;\n\n    //create new Pusher\n    //for authentication, token and userId is required\n    pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.currentUser.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    //create new presence-channel\n    channelName = pusher.subscribe(\"presence-video-channel\"); //requires auth\n\n    //get members in channel\n    channelName.bind(\"pusher:subscription_succeeded\", members => {\n      //get id of Admin from the object\n      firstMember = Object.keys(members.members)[0];\n    });\n\n    //listener for added members to the channel\n    channelName.bind(\"pusher:member_added\", member => {\n      //store added member in array\n      if (userNames.includes(member.id) === false) {\n        userNames.push(member.id);\n      }\n      console.log(userNames);\n    });\n\n    //listener for removed members to the channel\n    channelName.bind(\"pusher:member_removed\", member => {\n      console.log(userName);\n      //remove removed member from array\n      let i = userNames.indexOf(userName);\n      userNames.splice(i, 1);\n      console.log(userNames);\n      this.setState({\n        img1: !this.state.img1,\n        showMrzValidationButton: !this.state.showMrzValidationButton,\n        disableButton: true\n      });\n    });\n\n    //this is executed when the event is triggered\n    channelName.bind(`client-signal-${this.currentUser.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        //start peer where initiator = false\n        peer = this.startPeer(signal.userId, false);\n        this.setState({ isConnected: true });\n      }\n      peer.signal(signal.data);\n    });\n\n    //listener for user when declined\n    channelName.bind(`client-message-${this.currentUser.id}`, message => {\n      //delete cookie and send user to login page\n      setCookie(\"x-access-token\", \"\", -60 * 60);\n      window.location.href = \"/login\";\n      Router.push(\"/login\");\n    });\n\n    //listener for admin if user has successfully entered otp and ended the process\n    channelName.bind(`client-approval-${this.currentUser.id}`, message => {\n      swal({\n        title: \"Success!\",\n        text: \"The user has entered the correct OTP\",\n        type: \"success\",\n        confirmButtonText: \"Confirm\",\n        //when admin confirms, send audio recording in db\n        //hash user data and send to smart contract\n        onClose: () => {\n          //Stop audio recording and send .wav file to server\n          recordRTC.stopRecording(async () => {\n            let formData = new FormData();\n            let recordedBlob = recordRTC.getBlob();\n            console.log(recordedBlob);\n            let fileName = `${userName}.wav`;\n            //create new file to send to server\n            let file = new File([recordedBlob], fileName, {\n              mimeType: \"audio/wav\"\n            });\n            console.log(file);\n            formData.append(\"fileName\", fileName);\n            formData.append(\"file\", file);\n            formData.append(\"userName\", userName);\n            this.setState({ isRecording: \"\" });\n            //get user data from server\n            let response = await axios.post(\n              window.location.origin + \"/approval\",\n              formData\n            );\n            if (response.data.success) {\n              let accounts = await web3.eth.getAccounts();\n              let fname = response.data.fname;\n              let lname = response.data.lname;\n              let idNum = response.data.idNum;\n              let kycKey = response.data.kycKey;\n              console.log(fname, lname, idNum, kycKey);\n              //hash user data and store in smart contract\n              let hash = web3.utils.soliditySha3(\n                `${fname} ${lname} ${idNum} ${kycKey}`\n              );\n              contract.methods.storeHash(hash).send({\n                from: accounts[0]\n              });\n            } else {\n              console.log(\"error\");\n            }\n          });\n        }\n      });\n    });\n  };\n\n  //connect to peer\n  startPeer = (userId, initiator = true) => {\n    //create new Peer\n    peer = new Peer({\n      initiator,\n      stream: this.currentUser.stream,\n      trickle: false\n    });\n\n    //log simple-peer to console\n    // peer._debug = console.log\n\n    //sends offer signal to peer\n    //connection established when peer sends answer\n    peer.on(\"signal\", data => {\n      channelName.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.currentUser.id,\n        data: data\n      });\n    });\n\n    //when the connection is established get the peer's audio/video stream\n    peer.on(\"stream\", stream => {\n      try {\n        let userVideo = document.getElementById(\"user-video\");\n        userVideo.srcObject = stream;\n        const playPromise = userVideo.play();\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return userVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n        //send both streams to MultiStreamsMixer\n        let audioMixer = new MultiStreamsMixer([\n          this.currentUser.stream,\n          stream\n        ]);\n        //start recording the mixed streams\n        recordRTC = RecordRTC(audioMixer.getMixedStream(), {\n          recorderType: StereoAudioRecorder,\n          mimeType: \"audio/wav\"\n        });\n        //start recording\n        recordRTC.startRecording();\n        this.setState({ isRecording: \"Recording...\" });\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    return peer;\n  };\n\n  //verify the entered otp\n  otpVerify = async () => {\n    //get otpToken from server\n    let res = await axios.post(window.location.origin + \"/otpToken\");\n    if (res.data.success) {\n      let otpToken = res.data.otpToken;\n      //check whether otpToken is the same as the entered otp\n      if (otpToken === this.state.otp) {\n        //trigger client event to Admin\n        await channelName.trigger(`client-approval-${firstMember}`, {\n          message: \"User entered correct OTP\"\n        });\n        //destroy P2P connection\n        peer.destroy();\n        //delete user's cookie\n        //send user to login page\n        setCookie(\"x-access-token\", \"\", -60 * 60);\n        window.location.href = \"/login\";\n        Router.push(\"/login\");\n      } else {\n        this.setState({ message: \"wrong OTP!\" });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <style>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n        <div>\n          {/* shows if user has not been called to */}\n          {this.state.isConnected === false ? (\n            <Dimmer active>\n              <Loader indeterminate>Waiting for Admin</Loader>\n            </Dimmer>\n          ) : null}\n          <Segment style={{ marginTop: \"50px\" }}>\n            {/* Get video elements */}\n            <Container\n              className=\"video-container\"\n              style={{\n                width: \"500px\",\n                height: \"376px\",\n                margin: \"0px auto\",\n                border: \"2px solid black\",\n                position: \"relative\"\n              }}\n            >\n              <video\n                className=\"my-video\"\n                id=\"my-video\"\n                style={{\n                  width: \"130px\",\n                  position: \"absolute\",\n                  left: \"10px\",\n                  bottom: \"10px\",\n                  border: \"2px solid #0061ff\",\n                  zIndex: \"2\"\n                }}\n              />\n              <video\n                className=\"user-video\"\n                id=\"user-video\"\n                style={{\n                  position: \"absolute\",\n                  left: \"0\",\n                  right: \"0\",\n                  bottom: \"0\",\n                  top: \"0\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  zIndex: \"1\"\n                }}\n              />\n            </Container>\n            <br />\n            {/* OTP input */}\n            <Container style={{ width: \"71%\", marginBottom: \"13px\" }}>\n              <OtpInput\n                style={{ margin: \"auto\", width: \"70%\" }}\n                value={this.state.otp}\n                onChange={otp => {\n                  this.setState({ otp: otp, otpEntered: true });\n                }}\n                numInputs={6}\n                separator={<span>-</span>}\n              />\n              {this.state.message ? (\n                <Message error header=\"Oops!\" content={this.state.message} />\n              ) : null}\n            </Container>\n            {/* if otp entered, show button */}\n            {this.state.otpEntered ? (\n              <Button\n                style={{\n                  color: \"white\",\n                  backgroundColor: \"#ff3344\",\n                  width: \"50%\",\n                  margin: \"0px auto\"\n                }}\n                fluid\n                onClick={this.otpVerify}\n              >\n                Submit\n              </Button>\n            ) : null}\n          </Segment>\n        </div>\n      </div>\n    );\n  }\n}\n","import web3 from \"./web3\";\n\n//contract address and ABI/Interface to connect to it\nconst contractAddress = \"0x0523A4Da9E7f1eBcbcb5BeBa44440D4Ac4Ef0F5A\"; \nconst contractABI = [\n  {\n    constant: false,\n    inputs: [{ name: \"confirmed\", type: \"bool\" }],\n    name: \"answer\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getHashes\",\n    outputs: [{ name: \"\", type: \"bytes32[]\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"kycKey\", type: \"string\" },\n      { name: \"platformAddress\", type: \"address\" }\n    ],\n    name: \"verify\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"newHash\", type: \"bytes32\" }],\n    name: \"storeHash\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"payKYC\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"kycKey\", type: \"string\" },\n      { indexed: false, name: \"platformAddress\", type: \"address\" },\n      { indexed: false, name: \"sender\", type: \"address\" }\n    ],\n    name: \"KycListen\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"confirmed\", type: \"bool\" }],\n    name: \"PlatformListen\",\n    type: \"event\"\n  }\n];\n\nexport default new web3.eth.Contract(contractABI, contractAddress);\n","import Web3 from \"web3\";\n\n//use givenProvider to access the ethereum network\nconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:3000\");\n\nexport default web3;\n","const routes = require(\"next-routes\")();\n\nmodule.exports = routes;\n//add dynamic route \nroutes.add(\"passwordchange\", \"/passwordchange/:id\", \"passwordchange\");\n","//set cookie function\n//https://www.w3schools.com/js/js_cookies.asp\nexport function setCookie(cname, cvalue, exdays) {\n  let d = new Date();\n  d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n  let expires = \"expires=\" + d.toUTCString();\n  document.cookie =\n    cname + \"=\" + cvalue + \";\" + expires + \"HttpOnly;\" + \";path=/\";\n}\n\n//get cookie function\n//https://www.w3schools.com/js/js_cookies.asp\nexport function getCookie(cname) {\n  let name = cname + \"=\";\n  let ca = document.cookie.split(\";\");\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n","//function to get the users media\nexport default class MediaHandler {\n  getPermissions() {\n    return new Promise((resolve, rej) => {\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: true })\n        .then(stream => {\n          resolve(stream);\n        })\n        .catch(err => {\n          throw new Error(`Unable to fetch stream ${err}`);\n        });\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAifA;AAAA;AACA;AADA;AAeA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AADA;AA9BA;AAAA;AACA;AADA;AAkCA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCA;AA9CA;AAgDA;AACA;AACA;AAzLA;AA2LA;AACA;AACA;AACA;AACA;AACA;AAHA;AAOA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnPA;AAAA;AAAA;AAAA;AAAA;AAqPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AASA;AADA;AACA;AATA;AAWA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAjBA;AAAA;AACA;AADA;AAmBA;AAAA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApPA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AAFA;AAKA;AAEA;AAnBA;AAoBA;AACA;;;;;;;;;;;;;;;;AAIA;AACA;;AADA;AAGA;AACA;AADA;AAGA;AACA;;;;;;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAIA;AACA;;;AA6MA;AAAA;AACA;AAAA;AAUA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AARA;AAiBA;;;;AAvWA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AARA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAQA;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;A","sourceRoot":""}