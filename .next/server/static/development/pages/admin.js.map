{"version":3,"file":"static/development/pages/admin.js","sources":["webpack:///webpack/bootstrap","webpack:///../../style-loader/lib/addStyles.js\"","webpack:///./components/Layout.js","webpack:///./ethereum/src/contract.js","webpack:///./ethereum/src/web3.js","webpack:///./pages/admin.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"axios\"","webpack:///external \"mrz\"","webpack:///external \"next-routes\"","webpack:///external \"next/dynamic\"","webpack:///external \"next/head\"","webpack:///external \"nuka-carousel\"","webpack:///external \"otplib/otplib-browser\"","webpack:///external \"pusher-js\"","webpack:///external \"react\"","webpack:///external \"react-image-crop\"","webpack:///external \"react-otp-input\"","webpack:///external \"recordrtc\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"simple-peer\"","webpack:///external \"styled-jsx/style\"","webpack:///external \"sweetalert2\"","webpack:///external \"tesseract.ts\"","webpack:///external \"web3\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"static/development/pages/admin.js\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// require() chunk loading for javascript\n\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] !== 0) {\n \t\t\tvar chunk = require(\"../../../\" + ({}[chunkId]||chunkId) + \".js\");\n \t\t\tvar moreModules = chunk.modules, chunkIds = chunk.ids;\n \t\t\tfor(var moduleId in moreModules) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t\tfor(var i = 0; i < chunkIds.length; i++)\n \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"!../../style-loader/lib/addStyles.js\");","import React from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport Head from \"next/head\";\n\nexport default props => {\n  return (\n    <Container style={{ width: 650, border: 1 }}>\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css\"\n        />\n      </Head>\n      <style jsx global>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n\n      {props.children}\n    </Container>\n  );\n};\n","import web3 from \"./web3\";\n\n//contract address and ABI/Interface to connect to it\nconst contractAddress = \"0x0523A4Da9E7f1eBcbcb5BeBa44440D4Ac4Ef0F5A\"; //address of SC\nconst contractABI = [\n  {\n    constant: false,\n    inputs: [{ name: \"confirmed\", type: \"bool\" }],\n    name: \"answer\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"getHashes\",\n    outputs: [{ name: \"\", type: \"bytes32[]\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"kycKey\", type: \"string\" },\n      { name: \"platformAddress\", type: \"address\" }\n    ],\n    name: \"verify\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    constant: false,\n    inputs: [{ name: \"newHash\", type: \"bytes32\" }],\n    name: \"storeHash\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: \"payKYC\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: false, name: \"kycKey\", type: \"string\" },\n      { indexed: false, name: \"platformAddress\", type: \"address\" },\n      { indexed: false, name: \"sender\", type: \"address\" }\n    ],\n    name: \"KycListen\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, name: \"confirmed\", type: \"bool\" }],\n    name: \"PlatformListen\",\n    type: \"event\"\n  }\n];\n\nexport default new web3.eth.Contract(contractABI, contractAddress);\n","import Web3 from \"web3\";\n\n//use givenProvider to access the ethereum network\nconst web3 = new Web3(Web3.givenProvider || \"ws://localhost:3000\");\n\nexport default web3;\n","import React, { Component } from \"react\";\nimport Layout from \"../components/Layout\";\nimport {\n  Header,\n  Container,\n  Menu,\n  Message,\n  Button,\n  Icon,\n  Segment,\n  Card,\n  Modal,\n  Form,\n  Grid,\n  Accordion\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport web3 from \"../ethereum/src/web3\";\nimport contract from \"../ethereum/src/contract\";\nimport dynamic from \"next/dynamic\";\nconst VideoChat = dynamic(import(\"../components/VideoChat\"), {\n  ssr: false\n});\nconst ProfileHeader = dynamic(import(\"../components/ProfileHeader\"), {\n  ssr: false\n});\n\nclass adminPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      metaMask: true,\n      myAddress: \"\",\n      isVideo: true,\n      users: [],\n      usrs: [],\n      isChosen: false,\n      isPromoted: false,\n      isComp: \"\",\n      inEdit: false,\n      isAdmin: false,\n      hasMedia: false,\n      userName: \"\",\n      otherUserId: null,\n      role: \"\",\n      isNotCalled: \"true\",\n      message: \"\",\n      waitingMessage: \"\",\n      loading: false,\n      countMembers: \"\",\n      isEdited: \"\",\n      activeItem: \"videochat\",\n      ethAddresses: [],\n      ethAddressArray: [],\n      message: \"\",\n      sent: false,\n      beneficialOwners: []\n    };\n  }\n\n  async componentWillMount() {\n    //check if admin is looged in to metamask\n    setInterval(async () => {\n      web3.eth.getAccounts((err, accounts) => {\n        if (err != null) console.error(\"An error occurred: \" + err);\n        else if (accounts.length == 0) this.setState({ metaMask: false });\n        else this.setState({ metaMask: true, myAddress: accounts[0] });\n      });\n      //listen to user data changes from server\n      try {\n        const response = await axios.post(window.location.origin + \"/userlist\");\n        if (response.data.success) {\n          this.setState({ users: response.data.userData });\n          for (let i = 0; i < this.state.users.length; i++) {\n            if (this.state.users[i].edited) {\n              this.setState({ isEdited: this.state.users[i].edited });\n            }\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }, 1000);\n\n    //listener for smart contract where user requests come in\n    contract.events.KycListen({}, async (err, result) => {\n      if (err) {\n        console.log(err);\n      } else {\n        //received data is sent to server to verify kycKey\n        let kycKey = result.returnValues.kycKey;\n        let platformAddress = result.returnValues.platformAddress;\n        let toAddress = result.returnValues.sender;\n        let response = await axios.post(window.location.origin + \"/verify\", {\n          kycKey,\n          platformAddress\n        });\n        try {\n          //send answer back to requesting address\n          if (response.data.success) {\n            contract.methods.answer(response.data.confirmed).send({\n              from: this.state.myAddress,\n              to: toAddress\n            });\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    });\n  }\n\n  //get data of the selected user in the user list\n  selectUser = async (member, e, dimmer) => {\n    let currentUser = member.username;\n    try {\n      const response = await axios.post(window.location.origin + \"/usrs\", {\n        currentUser\n      });\n      if (response.data.success) {\n        this.setState({\n          usrs: response.data.userData,\n          beneficialOwners: response.data.beneficialOwners\n        });\n        //get Array of ethAddresses\n        for (let i = 1; i < this.state.usrs.length; i++) {\n          this.state.ethAddresses[i] = this.state.usrs[i].ethAddress;\n        }\n        //get Array of beneficial owners\n        //how get all data of beneficial Owner in one array?\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    this.setState({ dimmer, open: true, isChosen: true });\n  };\n\n  //close user preview modal\n  closeModal = async () => {\n    let userName = this.state.usrs[0].username;\n    //when closed, change edit state in DB\n    let response = await axios.post(window.location.origin + \"/changeEdit\", {\n      userName\n    });\n    if (response.data.success) {\n      this.setState({ open: false, ethAddresses: [] });\n      let a = false;\n      for (let i = 0; i < this.state.users.length; i++) {\n        if (!this.state.users[i].edited) {\n          this.setState({ isEdited: null });\n        }\n      }\n    }\n  };\n\n  //admin accesses user list\n  toList = () => {\n    this.setState({ isVideo: false, activeItem: \"users\" });\n  };\n\n  //admin accesses video chat\n  toVideo = () => {\n    this.setState({ isVideo: true, activeItem: \"videochat\" });\n  };\n\n  //open modal when selectUser() is triggered\n  show = dimmer => {\n    this.setState({ dimmer, open: true });\n  };\n\n  handleAccordionClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    this.setState({ activeIndex: newIndex });\n  };\n\n  render() {\n    const { activeIndex } = this.state;\n    const { open, dimmer, activeItem } = this.state;\n    return (\n      <div>\n        <ProfileHeader />\n        {this.state.metaMask == false ? (\n          <Message\n            error\n            content=\"Please login to Metamask\"\n            style={{ marginTop: \"5px\", marginLeft: \"16px\", width: \"98%\" }}\n          />\n        ) : null}\n        <Segment style={{ width: \"98%\", margin: \"16px\" }}>\n          <Header\n            as=\"h1\"\n            textAlign=\"center\"\n            style={{ color: \"#2985d0\", marginTop: \"10px\" }}\n          >\n            Admin Page\n          </Header>\n          <Menu pointing secondary>\n            <Menu.Item\n              active={activeItem === \"videochat\"}\n              name=\"video\"\n              onClick={this.toVideo}\n              style={{ color: \"#2985d0\" }}\n            >\n              <Icon name=\"video\" />\n              Videochat\n            </Menu.Item>\n            <Menu.Item\n              active={activeItem === \"users\"}\n              name=\"users\"\n              onClick={this.toList}\n              style={{ color: \"#2985d0\" }}\n            >\n              <Icon name=\"users\" />\n              Userlist\n              {this.state.isEdited ? (\n                <Icon\n                  name=\"circle thin\"\n                  size=\"tiny\"\n                  color=\"red\"\n                  style={{ marginBottom: \"10px\", marginLeft: \"2px\" }}\n                />\n              ) : null}\n            </Menu.Item>\n          </Menu>\n          {this.state.isVideo ? (\n            <VideoChat />\n          ) : (\n            <div>\n              {this.state.users.map(member => (\n                <Card\n                  key={member.id}\n                  raised\n                  style={\n                    member.kycKey === \"declined\"\n                      ? {\n                          height: \"400x\",\n                          width: \"180px\",\n                          display: \"inline-block\",\n                          margin: \"18px\",\n                          border: \"1px solid red\"\n                        }\n                      : {\n                          height: \"400x\",\n                          width: \"180px\",\n                          display: \"inline-block\",\n                          margin: \"18px\"\n                        }\n                  }\n                >\n                  <Card.Content>\n                    {member.edited ? (\n                      <Icon\n                        name=\"circle thin\"\n                        size=\"small\"\n                        color=\"red\"\n                        style={{\n                          float: \"right\",\n                          marginRight: \"-21px\",\n                          marginTop: \"-19px\"\n                        }}\n                      />\n                    ) : null}\n                    <Card.Header>\n                      {member.username}\n                      {member.isRegistered == \"yes\" ? (\n                        <Icon\n                          name=\"checkmark\"\n                          color=\"green\"\n                          style={{ float: \"right\" }}\n                        />\n                      ) : (\n                        <Icon name=\"x\" color=\"red\" style={{ float: \"right\" }} />\n                      )}\n                    </Card.Header>\n                    <Card.Meta style={{ marginTop: \"2px\" }}>\n                      <span>Last Modified: {member.lastModified}</span>\n                    </Card.Meta>\n                    <Card.Description>\n                      {member.lname}, {member.fname}\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra style={{ textAlign: \"center\" }}>\n                    <Button onClick={this.selectUser.bind(this, member)}>\n                      View Profile\n                    </Button>\n                  </Card.Content>\n                </Card>\n              ))}\n              {/* </Container> */}\n              {this.state.isChosen ? (\n                <Modal dimmer={dimmer} open={open} onClose={this.closeModal}>\n                  <Modal.Header>\n                    Profile of {this.state.usrs[0].username}\n                  </Modal.Header>\n                  <Modal.Content image>\n                    <Modal.Description>\n                      <Form>\n                        {/* {this.state.usrs.map(members => ( */}\n                        <div>\n                          <Form.Group widths=\"equal\">\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"Username\"\n                              value={this.state.usrs[0].username}\n                            />\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"ID\"\n                              value={this.state.usrs[0].id}\n                            />\n                          </Form.Group>\n                          <Form.Group widths=\"equal\">\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"First Name\"\n                              value={this.state.usrs[0].fname}\n                            />\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"Last Name\"\n                              value={this.state.usrs[0].lname}\n                            />\n                          </Form.Group>\n                          {this.state.usrs[0].edited == \"address\" ? (\n                            <div>\n                              <Form.Group>\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  width=\"eleven\"\n                                  fluid\n                                  label=\"Street\"\n                                  value={this.state.usrs[0].street}\n                                />\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  width=\"five\"\n                                  fluid\n                                  label=\"House Number\"\n                                  value={this.state.usrs[0].houseNr}\n                                />\n                              </Form.Group>\n                              <Form.Group>\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  width=\"six\"\n                                  fluid\n                                  type=\"number\"\n                                  label=\"Postal Code\"\n                                  value={this.state.usrs[0].postCode}\n                                />\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  width=\"ten\"\n                                  fluid\n                                  label=\"Place of Residence\"\n                                  value={this.state.usrs[0].placeOfRes}\n                                />\n                              </Form.Group>\n                            </div>\n                          ) : (\n                            <div>\n                              <Form.Group>\n                                <Form.Input\n                                  readOnly\n                                  width=\"eleven\"\n                                  fluid\n                                  label=\"Street\"\n                                  value={this.state.usrs[0].street}\n                                />\n                                <Form.Input\n                                  readOnly\n                                  width=\"five\"\n                                  fluid\n                                  label=\"House Number\"\n                                  value={this.state.usrs[0].houseNr}\n                                />\n                              </Form.Group>\n                              <Form.Group>\n                                <Form.Input\n                                  readOnly\n                                  width=\"six\"\n                                  fluid\n                                  type=\"number\"\n                                  label=\"Postal Code\"\n                                  value={this.state.usrs[0].postCode}\n                                />\n                                <Form.Input\n                                  readOnly\n                                  width=\"ten\"\n                                  fluid\n                                  label=\"Place of Residence\"\n                                  value={this.state.usrs[0].placeOfRes}\n                                />\n                              </Form.Group>\n                            </div>\n                          )}\n                          <Form.Group widths=\"equal\">\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"Date of Birth\"\n                              value={this.state.usrs[0].dateOfBirth}\n                            />\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"Nationality\"\n                              value={this.state.usrs[0].nat}\n                            />\n                          </Form.Group>\n                          <Form.Group widths=\"equal\">\n                            {this.state.usrs[0].edited == \"email\" ? (\n                              <Form.Input\n                                error\n                                readOnly\n                                fluid\n                                label=\"Email\"\n                                type=\"email\"\n                                value={this.state.usrs[0].email}\n                              />\n                            ) : (\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"Email\"\n                                type=\"email\"\n                                value={this.state.usrs[0].email}\n                              />\n                            )}\n                            {this.state.usrs[0].edited == \"mobNr\" ? (\n                              <Form.Input\n                                error\n                                readOnly\n                                fluid\n                                label=\"Mobile Number\"\n                                type=\"number\"\n                                value={this.state.usrs[0].mobNr}\n                              />\n                            ) : (\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"Mobile Number\"\n                                type=\"number\"\n                                value={this.state.usrs[0].mobNr}\n                              />\n                            )}\n                          </Form.Group>\n                          <Form.Group width=\"sixteen\">\n                            <Form.Input\n                              width=\"sixteen\"\n                              readOnly\n                              fluid\n                              label=\"Registration Date\"\n                              value={this.state.usrs[0].regDate}\n                            />\n                          </Form.Group>\n                          {this.state.beneficialOwners.length > 0 ? (\n                            <Accordion>\n                              <Accordion.Title\n                                active={activeIndex === 0}\n                                index={0}\n                                onClick={this.handleAccordionClick}\n                                style={{ fontWeight: \"bold\" }}\n                              >\n                                <Icon name=\"dropdown\" />\n                                Beneficial Owners of the Assets\n                              </Accordion.Title>\n                              <Accordion.Content active={activeIndex === 0}>\n                                {this.state.beneficialOwners.map(\n                                  beneficialOwner => (\n                                    <Segment>\n                                      <Form.Group widths=\"equal\">\n                                        <Form.Input\n                                          readOnly\n                                          fluid\n                                          label=\"First Name\"\n                                          value={beneficialOwner.ownerName}\n                                        />\n                                        <Form.Input\n                                          readOnly\n                                          fluid\n                                          label=\"Last Name\"\n                                          value={beneficialOwner.ownerLastName}\n                                        />\n                                      </Form.Group>\n                                      <Form.Group>\n                                        <Form.Input\n                                          readOnly\n                                          width=\"eleven\"\n                                          fluid\n                                          label=\"Street\"\n                                          value={beneficialOwner.ownerStreet}\n                                        />\n                                        <Form.Input\n                                          readOnly\n                                          width=\"five\"\n                                          fluid\n                                          label=\"House Number\"\n                                          value={beneficialOwner.ownerHouseNr}\n                                        />\n                                      </Form.Group>\n                                      <Form.Group>\n                                        <Form.Input\n                                          readOnly\n                                          width=\"six\"\n                                          fluid\n                                          label=\"Postal Code\"\n                                          value={beneficialOwner.ownerPostCode}\n                                        />\n                                        <Form.Input\n                                          readOnly\n                                          width=\"ten\"\n                                          fluid\n                                          label=\"Place of Residenz\"\n                                          value={beneficialOwner.ownerPlaceOfRes}\n                                        />\n                                      </Form.Group>\n                                      <Form.Group widths=\"equal\">\n                                        <Form.Input\n                                          readOnly\n                                          fluid\n                                          label=\"Date of Birth\"\n                                          value={beneficialOwner.ownerDateOfBirth}\n                                        />\n                                      </Form.Group>\n                                    </Segment>\n                                  )\n                                )}\n                              </Accordion.Content>\n                            </Accordion>\n                          ) : null}\n                          <br />\n\n                          {this.state.ethAddresses.length > 0 ? (\n                            <p style={{ fontWeight: \"bold\" }}>\n                              EthAddresses which requested the KycKey\n                            </p>\n                          ) : null}\n\n                          {this.state.ethAddresses.map(ethAddress => (\n                            <Form.Group width=\"sixteen\">\n                              <Form.Input\n                                width=\"sixteen\"\n                                readOnly\n                                fluid\n                                // label={i}\n                                value={ethAddress}\n                              />\n                            </Form.Group>\n                          ))}\n\n                          <p style={{ fontWeight: \"bold\" }}>Identity Card</p>\n                          <Form.Group\n                            widths=\"equal\"\n                            style={{ margin: \"0px auto\" }}\n                          >\n                            {/* <Grid width={16}>\n                        <Grid.Column> */}\n                            <a\n                              href={`../static/${this.state.usrs[0].ID1}`}\n                              target=\"_blank\"\n                              style={{ width: \"50%\" }}\n                            >\n                              <img\n                                className=\"img-responsive\"\n                                src={`../static/${this.state.usrs[0].ID1}`}\n                                style={{\n                                  width: \"200px\",\n                                  height: \"113px\"\n                                  // float: \"left\"\n                                }}\n                              />\n                            </a>\n                            {/* </Grid.Column>\n                        <Grid.Column> */}\n                            <a\n                              href={`../static/${this.state.usrs[0].ID2}`}\n                              target=\"_blank\"\n                              style={{ width: \"50%\" }}\n                            >\n                              <img\n                                className=\"img-responsive\"\n                                src={`../static/${this.state.usrs[0].ID2}`}\n                                style={{\n                                  width: \"200px\",\n                                  height: \"113px\"\n                                  // float: \"right\"\n                                }}\n                              />\n                            </a>\n                            {this.state.usrs[0].snapshot ? (\n                              <a\n                                href={`../static/${\n                                  this.state.usrs[0].snapshot\n                                }`}\n                                target=\"_blank\"\n                              >\n                                <img\n                                  className=\"img-responsive\"\n                                  src={`../static/${\n                                    this.state.usrs[0].snapshot\n                                  }`}\n                                  style={{\n                                    width: \"200px\",\n                                    height: \"113px\"\n                                    // float: \"left\"\n                                  }}\n                                />\n                              </a>\n                            ) : null}\n                            {/* </Grid.Column> */}\n                            {/* </Grid> */}\n                          </Form.Group>\n                          <br />\n                          <p style={{ fontWeight: \"bold\" }}>Audio Recording</p>\n                          <Form.Group colSpan={2}>\n                            <audio controls>\n                              <source\n                                src={`../static/${this.state.usrs[0].audio}`}\n                                type=\"audio/wav\"\n                              />\n                            </audio>\n                          </Form.Group>\n                          {this.state.usrs[0].isComp == \"1\" ? (\n                            <div>\n                              <Form.Group style={{ marginTop: \"10px\" }}>\n                                {this.state.usrs[0].edited == \"compName\" ? (\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"sixteen\"\n                                    fluid\n                                    label=\"Company Name\"\n                                    value={this.state.usrs[0].compName}\n                                  />\n                                ) : (\n                                  <Form.Input\n                                    readOnly\n                                    width=\"sixteen\"\n                                    fluid\n                                    label=\"Company Name\"\n                                    value={this.state.usrs[0].compName}\n                                  />\n                                )}\n                              </Form.Group>\n                              {this.state.usrs[0].edited == \"compAddress\" ? (\n                                <div>\n                                  <Form.Group>\n                                    <Form.Input\n                                      error\n                                      readOnly\n                                      width=\"eleven\"\n                                      fluid\n                                      label=\"Business Address\"\n                                      value={this.state.usrs[0].businessAd}\n                                    />\n                                    <Form.Input\n                                      error\n                                      readOnly\n                                      width=\"five\"\n                                      fluid\n                                      label=\"House Number\"\n                                      value={this.state.usrs[0].compHouseNr}\n                                    />\n                                  </Form.Group>\n                                  <Form.Group widths=\"equal\">\n                                    <Form.Input\n                                      error\n                                      readOnly\n                                      width=\"six\"\n                                      fluid\n                                      label=\"Postal Code\"\n                                      value={this.state.usrs[0].compPostCode}\n                                    />\n                                    <Form.Input\n                                      error\n                                      readOnly\n                                      width=\"ten\"\n                                      fluid\n                                      label=\"Place of Residenz\"\n                                      value={this.state.usrs[0].residence}\n                                    />\n                                  </Form.Group>\n                                </div>\n                              ) : (\n                                <div>\n                                  <Form.Group>\n                                    <Form.Input\n                                      readOnly\n                                      width=\"eleven\"\n                                      fluid\n                                      label=\"Business Address\"\n                                      value={this.state.usrs[0].businessAd}\n                                    />\n                                    <Form.Input\n                                      readOnly\n                                      width=\"five\"\n                                      fluid\n                                      label=\"House Number\"\n                                      value={this.state.usrs[0].compHouseNr}\n                                    />\n                                  </Form.Group>\n                                  <Form.Group widths=\"equal\">\n                                    <Form.Input\n                                      readOnly\n                                      width=\"six\"\n                                      fluid\n                                      label=\"Postal Code\"\n                                      value={this.state.usrs[0].compPostCode}\n                                    />\n                                    <Form.Input\n                                      readOnly\n                                      width=\"ten\"\n                                      fluid\n                                      label=\"Place of Residenz\"\n                                      value={this.state.usrs[0].residence}\n                                    />\n                                  </Form.Group>\n                                </div>\n                              )}\n                              <Form.Group\n                                width=\"sixteen\"\n                                style={{ margin: \"0px auto\" }}\n                              >\n                                <Icon name=\"linkify\" />\n                                <a\n                                  href={`../static/${this.state.usrs[0].doc1}`}\n                                  type=\"application/pdf\"\n                                  target=\"_blank\"\n                                >\n                                  View extract of the relevant registration\n                                  authority\n                                </a>\n                              </Form.Group>\n                              <Form.Group\n                                width=\"sixteen\"\n                                style={{ margin: \"0px auto\" }}\n                              >\n                                <Icon name=\"linkify\" />\n                                <a\n                                  href={`../static/${this.state.usrs[0].doc2}`}\n                                  type=\"application/pdf\"\n                                  target=\"_blank\"\n                                >\n                                  View electronic copy of the power of attorney\n                                </a>\n                              </Form.Group>\n                            </div>\n                          ) : null}\n                        </div>\n                        {/* ))} */}\n                      </Form>\n                    </Modal.Description>\n                  </Modal.Content>\n                  <Modal.Actions>\n                    <Container\n                      style={{ textAlign: \"center\", display: \"inline-block\" }}\n                    >\n                      <Button color=\"black\" onClick={this.closeModal}>\n                        Close\n                      </Button>\n                    </Container>\n                  </Modal.Actions>\n                </Modal>\n              ) : null}\n            </div>\n          )}\n          <Container style={{ width: \"100%\" }}>\n            <Head>\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css\"\n              />\n            </Head>\n            <style>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n          </Container>\n        </Segment>\n        {/* </Layout> */}\n      </div>\n    );\n  }\n}\n\nexport default adminPage;\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"axios\");","module.exports = require(\"mrz\");","module.exports = require(\"next-routes\");","module.exports = require(\"next/dynamic\");","module.exports = require(\"next/head\");","module.exports = require(\"nuka-carousel\");","module.exports = require(\"otplib/otplib-browser\");","module.exports = require(\"pusher-js\");","module.exports = require(\"react\");","module.exports = require(\"react-image-crop\");","module.exports = require(\"react-otp-input\");","module.exports = require(\"recordrtc\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"simple-peer\");","module.exports = require(\"styled-jsx/style\");","module.exports = require(\"sweetalert2\");","module.exports = require(\"tesseract.ts\");","module.exports = require(\"web3\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzHA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAFA;AAAA;AAAA;AAgBA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AARA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAQA;;;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;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAGA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAjDA;AAiEA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AALA;AAFA;AAYA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAaA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAYA;AAGA;AAJA;AAOA;AACA;AAGA;AACA;AACA;AACA;AAHA;AALA;AAiBA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAQA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAiBA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAeA;;;;AAjwBA;AACA;AAmwBA;;;;;;;;;;;;;;;;;;;;;;;AChyBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}