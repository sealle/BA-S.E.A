{"version":3,"file":"static/webpack/static/development/pages/admin.js.3da1b0c532cd52d273f4.hot-update.js","sources":["webpack:///./components/VideoChat.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ProfileHeader from \"../components/ProfileHeader\";\nimport Layout from \"../components/Layout\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\nimport { setCookie } from \"../utils/CookieUtils\";\nimport otplib from \"otplib\";\nimport authenticator from \"otplib/authenticator\";\nimport OtpInput from \"react-otp-input\";\nimport {\n  Header,\n  Message,\n  Segment,\n  Button,\n  Icon,\n  Container,\n  Grid,\n  Dimmer\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Router } from \"../routes\";\nimport swal from \"sweetalert2\";\n\nlet xsrfToken = \"\";\nlet pusher;\nlet peer;\nlet channelName;\nlet userName;\nlet userNames = [];\nlet token = \"\";\n\nexport default class VideoChat extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hasMedia: false,\n      userName: \"\",\n      otherUserId: null,\n      role: \"\",\n      isNotCalled: \"true\",\n      message: \"\",\n      waitingMessage: \"\",\n      loading: false,\n      countMembers: \"\",\n      isEdited: \"\",\n      activeItem: \"videochat\",\n      ethAddresses: [],\n      ethAddressArray: [],\n      message: \"\",\n      sent: false,\n      activeUser: \"\",\n      calledTo: false,\n    };\n\n    this.currentUser = {\n      id: \"\",\n      stream: undefined\n    };\n\n    this.peers = [];\n\n    this.mediaHandler = new MediaHandler();\n    // this.setupPusher();\n\n    // this.callTo = this.callTo.bind(this);\n    this.setupPusher = this.setupPusher.bind(this);\n    this.startPeer = this.startPeer.bind(this);\n    // this.endCall = this.endCall.bind(this);\n    // this.approval = this.approval.bind(this);\n    this.show = this.show.bind(this);\n    // this.closeModal = this.closeModal.bind(this);\n  }\n\n  async componentWillMount() {\n    try {\n      const response = await axios.post(\n        window.location.origin + \"/videochat/stream\",\n        { timeout: 60 * 4 * 1000 }\n      );\n      this.setState({\n        userName: response.data.currentUser,\n        role: response.data.role\n      });\n      this.currentUser.id = this.state.userName;\n      xsrfToken = response.data.token;\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    this.setupPusher();\n    return;\n  }\n\n  setupPusher() {\n    //Pusher.logToConsole = true;\n    pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.currentUser.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    channelName = pusher.subscribe(\"presence-video-channel\"); //requires auth\n\n    // channelName.bind(\"pusher:subscription_succeeded\", member => {\n      // userNames = members.id;\n      // channelName.members.each(member => {\n      //   userNames = member.id;\n      //   // userNames.push(member.id)\n      //   console.log(userNames)\n      // })\n      // console.log(countMembers);\n    // });\n\n    channelName.bind(\"pusher:member_added\", member => {\n      swal(\"You are conneted to\", `${member.id}`, \"success\");\n      \n      // userName = member.id;\n\n      userNames.push(member.id);\n      console.log(userNames);\n\n      // let newConnect = member.id;\n      // // swal(\"Attention\", \"Admin is occupied, please wait...\", \"warning\");\n      // axios.post(window.location.origin + \"/pusher/count\", {\n      //   newConnect\n      // });\n    });\n\n    channelName.bind(\"pusher:member_removed\", member => {\n      console.log(userName)\n      let i = userNames.indexOf(userName);\n      userNames.splice(i,1);\n      // this.show();\n      console.log(userNames);\n      // swal(\"Removed `${member.id}`\", \"Please press End Call to approve or decline the user\" , \"success\");\n      //reload admin page?\n    });\n\n    channelName.bind(`client-signal-${this.currentUser.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        // this.setState({ otherUserId: signal.userId });\n        peer = this.startPeer(signal.userId, false);\n\n        //callee //if offer is sent, stop!\n      }\n      peer.signal(signal.data);\n    });\n  }\n\n  startPeer(userId, initiator = true) {\n    //caller\n    //TODO: initiator is always user!\n    peer = new Peer({\n      initiator,\n      stream: this.currentUser.stream,\n      trickle: false\n    });\n\n    peer.on(\"signal\", data => {\n      channelName.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.currentUser.id,\n        data: data\n      });\n    });\n\n    peer.on(\"stream\", stream => {\n      try {\n        let userVideo = document.getElementById(\"user-video\");\n        userVideo.srcObject = stream;\n        const playPromise = userVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return userVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    return peer;\n  }\n\n  callTo = userId => {\n    // console.log(`starting Pusher: ${userId}`);\n    this.setState({ isNotCalled: false });\n    //TODO: show encall button only when in call?\n    this.peers[userId] = this.startPeer(userId);\n  };\n\n  decline = async () => {\n    peer.destroy();\n    let response = await axios.post(window.location.origin + \"/decline\", {\n      userName\n    });\n    if (response.data.success) {\n      swal(\"User declined\", \"\", \"success\");\n    } else {\n      console.log(\"something went wrong!\");\n    }\n  };\n\n  show(dimmer) {\n    this.setState({ dimmer, open: true });\n  }\n\n  returnHome = () => {\n    this.setState({ open: false });\n    setCookie(\"x-access-token\", \"\", -60 * 60);\n    window.location.href = \"/login\";\n    Router.push(\"/login\");\n  };\n\n  sendOTP = async () => {\n    let otpSecret = authenticator.generateSecret();\n    console.log(otpSecret);\n    this.setState({ otpSecret: otpSecret });\n    token = authenticator.generate(otpSecret);\n    console.log(token);\n    let response = await axios.post(window.location.origin + \"/createOTP\", {\n      userName,\n      token\n    });\n    if (response.data.success) {\n      swal(\"OTP sent!\", \"\", \"success\");\n      console.log(this.state.otpSecret);\n    }\n  };\n\n  otpVerify = async () => {\n    console.log(this.state.otpSecret);\n    let otpSecret = this.state.otpSecret;\n    console.log(token);\n    let isValid = authenticator.check(token, otpSecret);\n    console.log(isValid);\n    // console.log(otp) //TODO: Why undefined????\n    // console.log(token);\n    // if (otp === token) {\n    //   console.log(\"yess\")\n    //   let response = await axios.post(window.location.origin + \"/approval\", {\n    //     userName\n    //   });\n    //   if (response.data.success) {\n    //     setCookie(\"x-access-token\", \"\", -60 * 60);\n    //     window.location.href = \"/login\";\n    //     Router.push(\"/login\");\n    //   } else {\n    //     console.log(\"oops\")\n    //   }\n    // } else {\n    //   this.setState({ message: \"wrong OTP!\" });\n    // }\n  };\n\n  // show(dimmer) {\n  //   this.setState({ dimmer, open: true });\n  // }\n  // closeModal() {\n  //   this.setState({ open: false });\n  // }\n\n  render() {\n    return (\n      <div>\n        {/* <Layout> */}\n        <style>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n\n        <br />\n        {this.state.role == 1 ? (\n          <Segment style={{ margin: \"16px\", width: \"98%\" }}>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column width={8}>\n                  <div style={{ textAlign: \"center\" }}>\n                    <Container\n                      className=\"video-container\"\n                      style={{\n                        width: \"500px\",\n                        height: \"376px\",\n                        margin: \"0px auto\",\n                        border: \"2px solid black\",\n                        position: \"relative\"\n                      }}\n                    >\n                      <video\n                        className=\"my-video\"\n                        id=\"my-video\"\n                        style={{\n                          width: \"130px\",\n                          position: \"absolute\",\n                          left: \"10px\",\n                          bottom: \"10px\",\n                          border: \"2px solid #0061ff\",\n                          zIndex: \"2\"\n                        }}\n                      />\n                      <video\n                        className=\"user-video\"\n                        id=\"user-video\"\n                        style={{\n                          position: \"absolute\",\n                          left: \"0\",\n                          right: \"0\",\n                          bottom: \"0\",\n                          top: \"0\",\n                          width: \"100%\",\n                          height: \"100%\",\n                          zIndex: \"1\"\n                        }}\n                      />\n                    </Container>\n                    <Container\n                      style={{\n                        display: \"inline-block\",\n                        // textAlign: \"center\",\n                        marginTop: \"10px\",\n                        width: \"64%\",\n                        marginBottom: \"10px\"\n                      }}\n                    >\n                      <Button\n                        animated\n                        floated=\"left\"\n                        onClick={this.sendOTP}\n                        style={{\n                          backgroundColor: \"white\",\n                          border: \"1px solid black\",\n                          width: \"32%\"\n                        }}\n                      >\n                        <Button.Content visible>\n                          <Icon name=\"send\" color=\"green\" />\n                        </Button.Content>\n                        <Button.Content hidden>Send OTP</Button.Content>\n                      </Button>\n                      <Button\n                        animated\n                        floated=\"left\"\n                        onClick={this.decline}\n                        style={{\n                          backgroundColor: \"white\",\n                          border: \"1px solid black\",\n                          width: \"32%\"\n                        }}\n                      >\n                        <Button.Content visible>\n                          <Icon name=\"close\" color=\"red\" />\n                        </Button.Content>\n                        <Button.Content hidden>Quit Call</Button.Content>\n                      </Button>\n                      {userNames.map(userId => {\n                        return this.currentUser.id !== userId &&\n                          // this.state.isNotCalled ? (\n                          userNames != [] ? (\n                          <Button\n                            key={userId}\n                            animated\n                            floated=\"left\"\n                            key={userId}\n                            onClick={() => {\n                              this.callTo(userId);\n                              userName = userId;\n                              this.setState({calledTo: true})\n                            }}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32%\"\n                            }}\n                          >\n                            {\" \"}\n                            <Button.Content visible>\n                              Call {userId}\n                            </Button.Content>\n                            <Button.Content hidden>\n                              <Icon name=\"phone\" color=\"blue\" />\n                            </Button.Content>\n                          </Button>\n                        ) : null;\n                      })}\n                    </Container>\n                  </div>\n                  <br />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Segment>\n        ) : (\n          <div>\n            {this.state.calledTo === false ? \n            <Segment>\n            <Dimmer active>\n              <Loader indeterminate>Admin is in a call</Loader>\n            </Dimmer>\n          </Segment>: null }\n            <Segment style={{ marginTop: \"50px\" }}>\n              <Container\n                className=\"video-container\"\n                style={{\n                  width: \"500px\",\n                  height: \"376px\",\n                  margin: \"0px auto\",\n                  border: \"2px solid black\",\n                  position: \"relative\"\n                }}\n              >\n                <video\n                  className=\"my-video\"\n                  id=\"my-video\"\n                  style={{\n                    width: \"130px\",\n                    position: \"absolute\",\n                    left: \"10px\",\n                    bottom: \"10px\",\n                    border: \"2px solid #0061ff\",\n                    zIndex: \"2\"\n                  }}\n                />\n                <video\n                  className=\"user-video\"\n                  id=\"user-video\"\n                  style={{\n                    position: \"absolute\",\n                    left: \"0\",\n                    right: \"0\",\n                    bottom: \"0\",\n                    top: \"0\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    zIndex: \"1\"\n                  }}\n                />\n              </Container>\n              {this.state.sent ? (\n                <Message\n                  success\n                  header=\"Success\"\n                  content={this.state.message}\n                />\n              ) : null}\n              <br />\n              <Container style={{ width: \"71%\", marginBottom: \"13px\" }}>\n                <OtpInput\n                  value={this.state.otp}\n                  onChange={otp => {\n                    token = otp;\n                    this.setState({ otpEntered: true });\n                  }}\n                  // onChange={otp => console.log(otp)}\n                  numInputs={6}\n                  separator={<span>-</span>}\n                />\n                {this.state.message ? (\n                  <Message error header=\"Oops!\" content={this.state.message} />\n                ) : null}\n              </Container>\n              {this.state.otpEntered ? (\n                <Button\n                  style={{\n                    color: \"white\",\n                    backgroundColor: \"#ff3344\",\n                    width: \"50%\",\n                    margin: \"0px auto\"\n                  }}\n                  fluid\n                  onClick={this.otpVerify}\n                >\n                  Submit\n                </Button>\n              ) : null}\n\n              <Button\n                id=\"returnHome\"\n                style={{\n                  color: \"white\",\n                  width: \"50%\",\n                  margin: \"0px auto\"\n                }}\n                fluid\n                onClick={this.returnHome}\n              >\n                Submit\n              </Button>\n            </Segment>\n          </div>\n        )}\n        {/* </Layout> */}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA4LA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAjMA;AAAA;AAAA;AAAA;AAAA;AAkMA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AADA;AACA;AAHA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnMA;AAmNA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAxNA;AAAA;AAAA;AAAA;AAAA;AAyNA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AALA;AAAA;AAOA;AACA;AAFA;AACA;AAPA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1NA;AAAA;AAAA;AAAA;AAAA;AAyOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAoBA;AACA;AACA;AAFA;AAKA;AAEA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAvCA;AAwCA;AACA;;;;;;;;;;;;;;;;AAGA;AAEA;AAAA;AACA;;AAHA;AAIA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAqBA;AACA;AAAA;AAAA;AAAA;AACA;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAgBA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAIA;AAYA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAiBA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAOA;AACA;AARA;AAWA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AARA;AAeA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AAkBA;;;;AAlfA;AACA;;;;;A","sourceRoot":""}