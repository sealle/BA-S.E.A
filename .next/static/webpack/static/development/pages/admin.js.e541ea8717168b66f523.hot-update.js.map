{"version":3,"file":"static/webpack/static/development/pages/admin.js.e541ea8717168b66f523.hot-update.js","sources":["webpack:///./components/VideoChat.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ProfileHeader from \"../components/ProfileHeader\";\nimport Layout from \"../components/Layout\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\nimport { setCookie } from \"../utils/CookieUtils\";\nimport { authenticator } from \"otplib/otplib-browser\";\nimport OtpInput from \"react-otp-input\";\nimport { Tesseract } from \"tesseract.ts\";\nconst parse = require(\"mrz\").parse;\nimport RecordRTC from \"recordrtc\";\nconst StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\nimport Carousel from \"nuka-carousel\";\nimport ReactCrop from \"react-image-crop\";\nimport \"!style-loader!css-loader!react-image-crop/dist/ReactCrop.css\";\nimport {\n  Header,\n  Message,\n  Segment,\n  Button,\n  Icon,\n  Container,\n  Grid,\n  Dimmer,\n  Loader\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Router } from \"../routes\";\nimport swal from \"sweetalert2\";\nlet xsrfToken = \"\";\nlet pusher;\nlet peer;\nlet channelName;\nlet userName;\nlet userNames = [];\nlet recordRTC;\n\nexport default class VideoChat extends Component {\n  constructor() {\n    super();\n    this.imagePreviewCanvasRef = React.createRef();\n    this.state = {\n      hasMedia: false,\n      userName: \"\",\n      otherUserId: null,\n      role: 1,\n      isNotCalled: \"true\",\n      message: \"\",\n      waitingMessage: \"\",\n      loading: false,\n      countMembers: \"\",\n      isEdited: \"\",\n      activeItem: \"videochat\",\n      ethAddresses: [],\n      ethAddressArray: [],\n      message: \"\",\n      sent: false,\n      idIsValid: \"\",\n      users: [],\n      isConnected: false,\n      disableButton: true,\n      recordAudio: null,\n      isRecording: \"\",\n      crop: {\n        aspect: 8 / 1.5\n      }\n    };\n\n    this.currentUser = {\n      id: \"\",\n      stream: undefined\n    };\n\n    this.peers = [];\n\n    this.mediaHandler = new MediaHandler();\n\n    // this.setupPusher = this.setupPusher.bind(this);\n    // this.startPeer = this.startPeer.bind(this);\n    // this.show = this.show.bind(this);\n  }\n\n  async componentWillMount() {\n      try {\n        const response = await axios.post(\n          window.location.origin + \"/videochat/stream\"\n          // { timeout: 60 * 4 * 1000 }\n        );\n        this.setState({\n          userName: response.data.currentUser,\n          role: response.data.role\n        });\n        this.currentUser.id = this.state.userName;\n        xsrfToken = response.data.token;\n      } catch (e) {\n        console.log(e);\n      }\n\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    this.setupPusher();\n    return;\n  }\n\n  setupPusher = () => {\n    //Pusher.logToConsole = true;\n    pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.currentUser.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    channelName = pusher.subscribe(\"presence-video-channel\"); //requires auth\n\n    // channelName.bind(\"pusher:subscription_succeeded\", member => {\n    // userNames = members.id;\n    // channelName.members.each(member => {\n    //   userNames = member.id;\n    //   // userNames.push(member.id)\n    //   console.log(userNames)\n    // })\n    // console.log(countMembers);\n    // });\n\n    channelName.bind(\"pusher:member_added\", member => {\n      swal(\"You are conneted to\", `${member.id}`, \"success\"); //Only Admin!!\n      if (userNames.includes(member.id) === false) {\n        userNames.push(member.id);\n      }\n      console.log(userNames);\n    });\n\n    channelName.bind(\"pusher:member_removed\", member => {\n      console.log(userName);\n      let i = userNames.indexOf(userName);\n      userNames.splice(i, 1);\n      console.log(userNames);\n      this.setState({ img1: !this.state.img1, disableButton: true });\n      // This executed twice when OTP verifiy? TODO:\n    });\n\n    channelName.bind(`client-signal-${this.currentUser.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        // this.setState({ otherUserId: signal.userId });\n        peer = this.startPeer(signal.userId, false);\n        this.setState({ isConnected: true });\n        //callee //if offer is sent, stop!\n      }\n      peer.signal(signal.data);\n    });\n  };\n\n  startPeer = (userId, initiator = true) => {\n    peer = new Peer({\n      initiator,\n      stream: this.currentUser.stream,\n      trickle: false\n    });\n\n    peer.on(\"signal\", data => {\n      channelName.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.currentUser.id,\n        data: data\n      });\n    });\n\n    peer.on(\"stream\", stream => {\n      try {\n        let userVideo = document.getElementById(\"user-video\");\n        userVideo.srcObject = stream;\n        const playPromise = userVideo.play();\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return userVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n        recordRTC = RecordRTC(stream, {\n          //TODO: Which stream is beeing recorded? How to record both streams?\n          recorderType: StereoAudioRecorder,\n          mimeType: \"audio/wav\"\n        });\n        recordRTC.startRecording();\n        this.setState({ isRecording: \"Recording...\" });\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    return peer;\n  };\n\n  callTo = async userId => {\n    this.setState({ isNotCalled: false, disableButton: false });\n    this.peers[userId] = this.startPeer(userId);\n    let currentUser = userId;\n    let response = await axios.post(window.location.origin + \"/usrs\", {\n      currentUser\n    });\n    if (response.data.success) {\n      this.setState({\n        img1: response.data.pic1,\n        img2: response.data.pic2,\n        doc1: response.data.doc1,\n        doc2: response.data.doc2,\n        users: response.data.userData\n      });\n    }\n  };\n\n  decline = async () => {\n    peer.destroy();\n    recordRTC.stopRecording(async () => {\n      let formData = new FormData();\n      let recordedBlob = recordRTC.getBlob();\n      console.log(recordedBlob);\n      let fileName = `${userName}.wav`;\n      let file = new File([recordedBlob], fileName, { mimeType: \"audio/wav\" });\n      console.log(file);\n      formData.append(\"fileName\", fileName);\n      formData.append(\"file\", file);\n      formData.append(\"userName\", userName);\n      this.setState({ isRecording: \"\" });\n      let response = await axios.post(\n        window.location.origin + \"/decline\",\n        formData\n      );\n      if (response.data.success) {\n        swal(\"User declined\", \"\", \"success\");\n        this.setState({ isCalled: false });\n      } else {\n        console.log(\"something went wrong!\");\n      }\n    });\n  };\n\n  show = dimmer => {\n    this.setState({ dimmer, open: true });\n  };\n\n  returnHome = () => {\n    this.setState({ open: false });\n    setCookie(\"x-access-token\", \"\", -60 * 60);\n    window.location.href = \"/login\";\n    Router.push(\"/login\");\n  };\n\n  sendOTP = async () => {\n    this.setState({ loading: true });\n    let otpSecret = authenticator.generateSecret();\n    console.log(otpSecret);\n    let otpToken = authenticator.generate(otpSecret);\n    console.log(otpToken);\n    console.log(userName);\n    //Stop audio recording and send .wav file to server\n    recordRTC.stopRecording(async () => {\n      let formData = new FormData();\n      let recordedBlob = recordRTC.getBlob();\n      console.log(recordedBlob);\n      let fileName = `${userName}.wav`;\n      let file = new File([recordedBlob], fileName, {\n        mimeType: \"audio/wav\"\n      });\n      console.log(file);\n      formData.append(\"fileName\", fileName);\n      formData.append(\"file\", file);\n      formData.append(\"otpToken\", otpToken);\n      formData.append(\"userName\", userName);\n      this.setState({ isRecording: \"\" });\n      let response = await axios.post(\n        window.location.origin + \"/createOTP\",\n        formData\n      );\n      if (response.data.success) {\n        swal(\"OTP sent!\", \"\", \"success\");\n        this.setState({ isCalled: false, loading: false });\n      }\n    });\n  };\n\n  otpVerify = async () => {\n    let res = await axios.post(window.location.origin + \"/otpToken\");\n    if (res.data.success) {\n      let otpToken = res.data.otpToken;\n      console.log(otpToken);\n      console.log(this.state.otp);\n      // let isValid = authenticator.check(this.state.otp, otpSecret);\n      // console.log(isValid);\n      if (otpToken === this.state.otp) {\n        let response = await axios.post(window.location.origin + \"/approval\");\n        if (response.data.success) {\n          setCookie(\"x-access-token\", \"\", -60 * 60);\n          window.location.href = \"/login\";\n          Router.push(\"/login\");\n        } else {\n          console.log(\"oops\");\n        }\n        peer.destroy();\n      } else {\n        this.setState({ message: \"wrong OTP!\" });\n      }\n    }\n  };\n\n  ocrScan = () => {\n    this.setState({ loadingOCR: true });\n    let image = document.getElementById(\"mrz-code\");\n    Tesseract.recognize(image).then((result, err) => {\n      if (err) {\n        console.log(err);\n      }\n      let ocrText1 = JSON.stringify(result.text).substring(1, 31);\n      let ocrText2 = JSON.stringify(result.text).substring(33, 63);\n      let ocrText3 = JSON.stringify(result.text).substring(65, 95);\n      let ocrLines = [];\n      ocrLines.push(ocrText1, ocrText2, ocrText3);\n      let res = parse(ocrLines);\n      if (res.valid === true) {\n        this.setState({ idIsValid: true });\n      } else {\n        this.setState({ idIsValid: false });\n      }\n      this.setState({ loadingOCR: false, ocr: result.text, isCalled: true });\n    });\n  };\n\n  handleOnCropChange1 = crop => {\n    this.setState({ crop: crop });\n  };\n\n  handleImageLoaded1 = image => {\n    console.log(image);\n  };\n\n  handleOnCropComplete1 = (crop, pixelCrop) => {\n    console.log(crop, pixelCrop);\n    const canvasRef = this.imagePreviewCanvasRef.current;\n    let image1 = \"static/IDD.jpg\";\n    // let image1 = \"static/\" + this.state.img1;\n    this.cropImage(canvasRef, image1, pixelCrop);\n  };\n\n  handleOnCropChange2 = crop => {\n    this.setState({ crop: crop });\n  };\n\n  handleImageLoaded2 = image => {\n    console.log(image);\n  };\n\n  handleOnCropComplete2 = (crop, pixelCrop) => {\n    console.log(crop, pixelCrop);\n    const canvasRef = this.imagePreviewCanvasRef.current;\n    // let image2 = \"static/cvbn-IDfront.jpg\";\n    let image2 = \"static/\" + this.state.img2;\n    this.cropImage(canvasRef, image2, pixelCrop);\n  };\n\n  cropImage = (canvasRef, image64, pixelCrop) => {\n    const canvas = canvasRef;\n    canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height;\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = image64;\n    image.onload = function() {\n      ctx.drawImage(\n        image,\n        pixelCrop.x,\n        pixelCrop.y,\n        pixelCrop.width,\n        pixelCrop.height,\n        0,\n        0,\n        pixelCrop.width,\n        pixelCrop.height\n      );\n    };\n  };\n\n\n  render() {\n    return (\n      <div>\n        {/* <Layout> */}\n        <style>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n        {this.state.role == 1 ? (\n          <Segment style={{ marginTop: \"16px\", width: \"100%\" }}>\n            <Grid>\n              <Grid.Row>\n                <Grid.Column width={8}>\n                  <Container\n                    className=\"video-container\"\n                    style={{\n                      width: \"500px\",\n                      height: \"380px\",\n                      margin: \"0px auto\",\n                      border: \"2px solid black\",\n                      position: \"relative\"\n                    }}\n                  >\n                    <video\n                      className=\"my-video\"\n                      id=\"my-video\"\n                      style={{\n                        width: \"130px\",\n                        position: \"absolute\",\n                        left: \"10px\",\n                        bottom: \"10px\",\n                        border: \"2px solid #0061ff\",\n                        zIndex: \"2\"\n                      }}\n                    />\n                    <video\n                      className=\"user-video\"\n                      id=\"user-video\"\n                      style={{\n                        position: \"absolute\",\n                        left: \"0\",\n                        right: \"0\",\n                        bottom: \"0\",\n                        top: \"0\",\n                        width: \"100%\",\n                        height: \"100%\",\n                        zIndex: \"1\"\n                      }}\n                    />\n                  </Container>\n                  <br />\n                  <Container style={{ width: \"62%\" }}>\n                    {this.state.disableButton === false ? (\n                      <div>\n                        <Button\n                          animated\n                          loading={this.state.loading}\n                          floated=\"left\"\n                          onClick={this.sendOTP}\n                          style={{\n                            backgroundColor: \"white\",\n                            border: \"1px solid black\",\n                            width: \"40%\"\n                          }}\n                        >\n                          <Button.Content visible>\n                            <Icon name=\"send\" color=\"green\" />\n                          </Button.Content>\n                          <Button.Content hidden>Send OTP</Button.Content>\n                        </Button>\n                        <Button\n                          animated\n                          floated=\"left\"\n                          onClick={this.decline}\n                          style={{\n                            backgroundColor: \"white\",\n                            border: \"1px solid black\",\n                            width: \"40%\"\n                          }}\n                        >\n                          <Button.Content visible>\n                            <Icon name=\"close\" color=\"red\" />\n                          </Button.Content>\n                          <Button.Content hidden>Quit Call</Button.Content>\n                        </Button>\n                        <span>{this.state.isRecording}</span>\n                      </div>\n                    ) : (\n                      <div>\n                        <Button\n                          animated\n                          floated=\"left\"\n                          onClick={this.sendOTP}\n                          style={{\n                            backgroundColor: \"white\",\n                            border: \"1px solid black\",\n                            width: \"40%\"\n                          }}\n                          disabled\n                        >\n                          <Button.Content visible>\n                            <Icon name=\"send\" color=\"green\" />\n                          </Button.Content>\n                          <Button.Content hidden>Send OTP</Button.Content>\n                        </Button>\n                        <Button\n                          animated\n                          floated=\"left\"\n                          onClick={this.decline}\n                          style={{\n                            backgroundColor: \"white\",\n                            border: \"1px solid black\",\n                            width: \"40%\"\n                          }}\n                          disabled\n                        >\n                          <Button.Content visible>\n                            <Icon name=\"close\" color=\"red\" />\n                          </Button.Content>\n                          <Button.Content hidden>Quit Call</Button.Content>\n                        </Button>\n                        <span>{this.state.isRecording}</span>\n                      </div>\n                    )}\n                  </Container>\n                </Grid.Column>\n                <Grid.Column width=\"eight\">\n                  {/* {this.state.isCaptured ? */}\n                  {/* {this.state.img1 ? ( */}\n                  <div>\n                    <Carousel\n                      dragging={false}\n                      slidesToShow={1}\n                      style={{ width: \"75%\", margin: \"auto\" }}\n                      renderBottomCenterControls={false}\n                    >\n                      <div>\n                        <ReactCrop\n                          style={{ width: \"100%\", margin: \"auto\" }}\n                          // src={`../static/${this.state.img1}`}\n                          src={\"static/IDD.jpg\"}\n                          crop={this.state.crop}\n                          onChange={this.handleOnCropChange1}\n                          onImageLoaded={this.handleImageLoaded1}\n                          onComplete={this.handleOnCropComplete1}\n                        />\n                      </div>\n                      <div>\n                        <ReactCrop\n                          style={{ width: \"100%\", margin: \"auto\" }}\n                          src={`../static/${this.state.img2}`}\n                          // src={\"static/cvbn-IDfront.jpg\"}\n                          crop={this.state.crop}\n                          onChange={this.handleOnCropChange2}\n                          onImageLoaded={this.handleImageLoaded2}\n                          onComplete={this.handleOnCropComplete2}\n                        />\n                      </div>\n                    </Carousel>\n                    <br />\n                    <canvas\n                      id=\"mrz-code\"\n                      ref={this.imagePreviewCanvasRef}\n                      style={{ width: \"300%\", \n                      // display: \"none\" \n                    }}\n                    />\n                    {/* <Button onClick={this.cropImage}>Crop</Button> */}\n                    {this.state.idIsValid ? (\n                      <Message\n                        header=\"Valid!\"\n                        success\n                        content={this.state.ocr}\n                        style={{\n                          width: \"75%\",\n                          marginLeft: \"12.5%\",\n                          boxShadow: \"1px 1px 11px green\",\n                          border: \"1px solid green\",\n                        }}\n                      />\n                    ) : this.state.idIsValid === false ? (\n                      <Message\n                        header=\"NOT Valid!\"\n                        success\n                        content={this.state.ocr}\n                        style={{\n                          boxShadow: \"1px 1px 11px red\",\n                          border: \"1px solid red\"\n                        }}\n                      />\n                    ) : null}\n\n                    {/* : null } */}\n                  </div>\n                   {/* ) : null}  */}\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Column width=\"eight\">\n                  <Container\n                    style={\n                      {\n                        // display: \"inline-block\",\n                        // textAlign: \"center\",\n                        // marginTop: \"10px\",\n                        // width: \"64%\",\n                        // marginBottom: \"10px\"\n                      }\n                    }\n                  >\n                    {userNames.map(userId => {\n                      return this.currentUser.id !== userId &&\n                        // this.state.isNotCalled ? (\n                        userNames != [] ? (\n                        <Button\n                          key={userId}\n                          animated\n                          floated=\"left\"\n                          key={userId}\n                          onClick={() => {\n                            this.callTo(userId);\n                            userName = userId;\n                          }}\n                          style={{\n                            backgroundColor: \"white\",\n                            border: \"1px solid black\",\n                            width: \"32%\"\n                          }}\n                        >\n                          {\" \"}\n                          <Button.Content visible>Call {userId}</Button.Content>\n                          <Button.Content hidden>\n                            <Icon name=\"phone\" color=\"blue\" />\n                          </Button.Content>\n                        </Button>\n                      ) : null;\n                    })}\n                  </Container>\n                </Grid.Column>\n                <Grid.Column width=\"eight\">\n                  <Container style={{ textAlign: \"center\" }}>\n                    <Button\n                      onClick={this.ocrScan}\n                      loading={this.state.loadingOCR}\n                    >\n                      Validate MRZ Code\n                    </Button>\n                  </Container>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Segment>\n        ) : (\n          <div>\n            {this.state.isConnected === false ? (\n              <Dimmer active>\n                <Loader indeterminate>Waiting for Admin</Loader>\n              </Dimmer>\n            ) : null}\n            <Segment style={{ marginTop: \"50px\" }}>\n              <Container\n                className=\"video-container\"\n                style={{\n                  width: \"500px\",\n                  height: \"376px\",\n                  margin: \"0px auto\",\n                  border: \"2px solid black\",\n                  position: \"relative\"\n                }}\n              >\n                <video\n                  className=\"my-video\"\n                  id=\"my-video\"\n                  style={{\n                    width: \"130px\",\n                    position: \"absolute\",\n                    left: \"10px\",\n                    bottom: \"10px\",\n                    border: \"2px solid #0061ff\",\n                    zIndex: \"2\"\n                  }}\n                />\n                <video\n                  className=\"user-video\"\n                  id=\"user-video\"\n                  style={{\n                    position: \"absolute\",\n                    left: \"0\",\n                    right: \"0\",\n                    bottom: \"0\",\n                    top: \"0\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    zIndex: \"1\"\n                  }}\n                />\n              </Container>\n              {this.state.sent ? (\n                <Message\n                  success\n                  header=\"Success\"\n                  content={this.state.message}\n                />\n              ) : null}\n              <br />\n              <Container style={{ width: \"71%\", marginBottom: \"13px\" }}>\n                <OtpInput\n                  value={this.state.otp}\n                  onChange={otp => {\n                    this.setState({ otp: otp, otpEntered: true });\n                  }}\n                  // onChange={otp => console.log(otp)}\n                  numInputs={6}\n                  separator={<span>-</span>}\n                />\n                {this.state.message ? (\n                  <Message error header=\"Oops!\" content={this.state.message} />\n                ) : null}\n              </Container>\n              {this.state.otpEntered ? (\n                <Button\n                  style={{\n                    color: \"white\",\n                    backgroundColor: \"#ff3344\",\n                    width: \"50%\",\n                    margin: \"0px auto\"\n                  }}\n                  fluid\n                  onClick={this.otpVerify}\n                >\n                  Submit\n                </Button>\n              ) : null}\n\n              <Button\n                id=\"returnHome\"\n                style={{\n                  color: \"white\",\n                  width: \"50%\",\n                  margin: \"0px auto\"\n                }}\n                fluid\n                onClick={this.returnHome}\n              >\n                Submit\n              </Button>\n            </Segment>\n          </div>\n        )}\n        {/* </Layout> */}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA5IA;AA6IA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyLA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAHA;AAAA;AAKA;AADA;AACA;AALA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1LA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AA2MA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AACA;AADA;AAWA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5MA;AAsOA;AAAA;AAAA;AAAA;AACA;AACA;AAxOA;AA0OA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AA/OA;AAAA;AAAA;AAAA;AAAA;AAgPA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAdA;AAAA;AACA;AADA;AAcA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjPA;AAAA;AAAA;AAAA;AAAA;AAiRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjBA;AAAA;AACA;AADA;AAmBA;AAAA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlRA;AA0SA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA9TA;AAgUA;AAAA;AAAA;AACA;AACA;AAlUA;AAoUA;AACA;AACA;AAtUA;AAwUA;AACA;AACA;AACA;AACA;AACA;AACA;AA9UA;AAgVA;AAAA;AAAA;AACA;AACA;AAlVA;AAoVA;AACA;AACA;AAtVA;AAwVA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA9VA;AAgWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAWA;AACA;AACA;AAlXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAuBA;AADA;AAKA;AACA;AACA;AAFA;AAKA;AAEA;AAGA;AACA;AACA;AA1CA;AA0CA;AACA;;;;;;;;;;;;;;;;AAGA;AAAA;AACA;;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAoSA;AAAA;AACA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAgBA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AAWA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AATA;AAWA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AATA;AAWA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAOA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AAPA;AAYA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAPA;AAaA;AACA;AACA;AAAA;AACA;AADA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAaA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAiBA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAcA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAiBA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAPA;AAUA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AARA;AAeA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AARA;AAkBA;;;;AAxtBA;AACA;;;;;A","sourceRoot":""}