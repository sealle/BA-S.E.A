{"version":3,"file":"static/webpack/static/development/pages/admin.js.d00c6d7812b5e2541cd3.hot-update.js","sources":["webpack:///./pages/admin.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ProfileHeader from \"../components/ProfileHeader\";\nimport Layout from \"../components/Layout\";\nimport {\n  Header,\n  Container,\n  Menu,\n  Message,\n  Button,\n  Icon,\n  Segment,\n  Card,\n  Modal,\n  Form\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport web3 from \"../ethereum/src/web3\";\nimport contract from \"../ethereum/src/contract\";\nimport swal from \"sweetalert2\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\n\nlet xsrfToken = \"\";\nlet pusher;\nlet channelName;\nlet userName;\n\nclass adminPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      metaMask: true,\n      myAddress: \"\",\n      isVideo: true,\n      users: [],\n      usrs: [],\n      isChosen: false,\n      isPromoted: false,\n      isComp: \"\",\n      inEdit: false,\n      isAdmin: false,\n      hasMedia: false,\n      userName: \"\",\n      otherUserId: null,\n      connectedTo: \"\",\n      role: \"\",\n      isNotCalled: \"true\",\n      message: \"\",\n      waitingMessage: \"\",\n      loading: false,\n      countMembers: \"\",\n      isEdited: \"\",\n      activeItem: \"videochat\",\n      ethAddresses: [],\n      ethAddressArray: []\n    };\n    this.currentUser = {\n      id: \"\",\n      stream: undefined\n    };\n\n    this.peers = [];\n\n    this.mediaHandler = new MediaHandler();\n    // this.setupPusher();\n    this.show = this.show.bind(this);\n    this.callTo = this.callTo.bind(this);\n    this.setupPusher = this.setupPusher.bind(this);\n    this.startPeer = this.startPeer.bind(this);\n    this.approval = this.approval.bind(this);\n    this.decline = this.decline.bind(this);\n    this.makeAdmin = e => this._makeAdmin();\n    this.closeModal = this.closeModal.bind(this);\n    this.closeModalAfterApproval = this.closeModalAfterApproval.bind(this);\n  }\n\n  async componentWillMount() {\n    setInterval(async () => {\n      web3.eth.getAccounts((err, accounts) => {\n        if (err != null) console.error(\"An error occurred: \" + err);\n        else if (accounts.length == 0) this.setState({ metaMask: false });\n        else this.setState({ metaMask: true, myAddress: accounts[0] });\n      });\n      try {\n        const response = await axios.post(window.location.origin + \"/userlist\");\n        if (response.data.success) {\n          this.setState({ users: response.data.userData });\n          for (let i = 0; i < this.state.users.length; i++) {\n            if (this.state.users[i].edited) {\n              this.setState({ isEdited: this.state.users[i].edited });\n            }\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }, 1000);\n\n    contract.events.KycListen({}, async (err, result) => {\n      if (err) {\n        console.log(err);\n      } else {\n        let kycKey = result.returnValues.kycKey;\n        let platformAddress = result.returnValues.platformAddress;\n        let toAddress = result.returnValues.sender;\n        let response = await axios.post(window.location.origin + \"/verify\", {\n          kycKey,\n          platformAddress\n        });\n        try {\n          if (response.data.success) {\n            contract.methods.answer(response.data.confirmed).send({\n              from: this.state.myAddress,\n              to: toAddress\n            });\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    });\n\n    try {\n      const response = await axios.post(\n        window.location.origin + \"/videochat/stream\",\n        { timeout: 60 * 4 * 1000 }\n      );\n      this.setState({\n        userName: response.data.currentUser,\n        role: response.data.role\n      });\n      this.currentUser.id = this.state.userName;\n      xsrfToken = response.data.token;\n    } catch (e) {\n      console.log(e);\n    }\n\n    // this.currentUser.id = getCurrentUser();\n\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    this.setupPusher();\n    return;\n  }\n\n  setupPusher() {\n    //Pusher.logToConsole = true;\n    pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.currentUser.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    channelName = pusher.subscribe(\"presence-video-channel\"); //requires auth\n\n    channelName.bind(\"pusher:subscription_succeeded\", members => {\n      let countMembers = members.count;\n      // console.log(countMembers);\n    });\n\n    channelName.bind(\"pusher:member_added\", member => {\n      this.setState({ connectedTo: member.id });\n      swal(\"You are conneted to\", `${member.id}`, \"success\");\n      userName = member.id;\n      // let newConnect = member.id;\n      // // swal(\"Attention\", \"Admin is occupied, please wait...\", \"warning\");\n      // axios.post(window.location.origin + \"/pusher/count\", {\n      //   newConnect\n      // });\n    });\n\n    channelName.bind(\"pusher:member_removed\", member => {\n      this.show();\n      this.setState({ connectedTo: \"\" });\n      // swal(\"Removed `${member.id}`\", \"Please press End Call to approve or decline the user\" , \"success\");\n      //reload admin page?\n    });\n\n    channelName.bind(`client-signal-${this.currentUser.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        // this.setState({ otherUserId: signal.userId });\n        peer = this.startPeer(signal.userId, false);\n\n        //callee //if offer is sent, stop!\n      }\n      peer.signal(signal.data);\n    });\n  }\n\n  startPeer(userId, initiator = true) {\n    //caller\n    //TODO: initiator is always user!\n    const peer = new Peer({\n      initiator,\n      stream: this.currentUser.stream,\n      trickle: false\n    });\n\n    peer.on(\"signal\", data => {\n      channelName.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.currentUser.id,\n        data: data\n      });\n    });\n\n    peer.on(\"stream\", stream => {\n      try {\n        let userVideo = document.getElementById(\"user-video\");\n        userVideo.srcObject = stream;\n        const playPromise = userVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return userVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n    return peer;\n  }\n\n  async selectUser(member, e, dimmer) {\n    let currentUser = member.username;\n    try {\n      const response = await axios.post(window.location.origin + \"/usrs\", {\n        currentUser\n      });\n      if (response.data.success) {\n        this.setState({\n          usrs: response.data.userData,\n          isComp: response.data.isComp,\n          img1: response.data.pic1,\n          img2: response.data.pic2,\n          doc1: response.data.doc1,\n          doc2: response.data.doc2\n        });\n        for (let i = 1; i < this.state.usrs.length; i++) {\n          this.state.ethAddresses[i] = this.state.usrs[i].ethAddress;\n          this.state.ethAddressArray.push(\n            <Form.Group width=\"sixteen\">\n              <Form.Input\n                width=\"sixteen\"\n                readOnly\n                fluid\n                // label={i}\n                value={this.state.ethAddresses[i]}\n              />\n            </Form.Group>\n          );\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    this.setState({ dimmer, open: true, isChosen: true });\n  }\n\n  async _makeAdmin() {\n    let currentUser = this.state.usrs[0].username;\n    try {\n      const response = await axios.post(window.location.origin + \"/makeadmin\", {\n        currentUser\n      });\n      if (response.data.success) {\n        this.setState({ successMessage: response.data.message, isAdmin: true });\n        console.log(this.state.successMessage);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    this.setState({ isPromoted: true });\n  }\n\n  async closeModal() {\n    let userName = this.state.usrs[0].username;\n    let response = await axios.post(window.location.origin + \"/changeEdit\", {\n      userName\n    });\n    if (response.data.success) {\n      this.setState({ open: false, ethAddresses: [] });\n      let a = false;\n      for (let i = 0; i < this.state.users.length; i++) {\n        if (!this.state.users[i].edited) {\n          this.setState({ isEdited: null });\n        }\n      }\n    }\n  }\n\n  async closeModalAfterApproval() {\n    this.setState({ open: false });\n  }\n\n  toList = () => {\n    this.setState({ isVideo: false, activeItem: \"users\" });\n  };\n\n  toVideo = () => {\n    this.setState({ isVideo: true, activeItem: \"videochat\" });\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n  };\n\n  callTo(userId) {\n    this.setState({ isNotCalled: false });\n    this.peers[userId] = this.startPeer(userId);\n  }\n\n  show(dimmer) {\n    this.setState({ dimmer, open: true });\n  }\n\n  async approval() {\n    let newAccount = web3.eth.accounts.create();\n    let newKycKey = newAccount.address;\n    let response = await axios.post(window.location.origin + \"/approval\", {\n      newKycKey,\n      userName\n    });\n    if (response.data.success) {\n      this.closeModalAfterApproval();\n    } else {\n      console.log(\"error\");\n    }\n    // window.location.href = \"/admin\";\n  }\n\n  async decline() {\n    let response = await axios.post(window.location.origin + \"/decline\", {\n      userName\n    });\n    if (response.data.success) {\n      this.closeModalAfterApproval();\n    } else {\n      console.log(\"error\");\n    }\n    // window.location.href = \"/admin\";\n  }\n\n  render() {\n    const { open, dimmer, activeItem } = this.state;\n    return (\n      <div>\n        <ProfileHeader />\n        {/* <Helper/> */}\n        {/* <Layout> */}\n        {this.state.metaMask == false ? (\n          <Message\n            error\n            content=\"Please login to Metamask\"\n            style={{ marginTop: \"5px\", marginLeft: \"120px\", width: \"900px\" }}\n          />\n        ) : null}\n        <Segment style={{ width: \"98%\", margin: \"16px\" }}>\n          <Header\n            as=\"h1\"\n            textAlign=\"center\"\n            style={{ color: \"#2985d0\", marginTop: \"10px\" }}\n          >\n            Admin Page\n          </Header>\n          <Menu pointing secondary>\n            <Menu.Item\n              active={activeItem === \"videochat\"}\n              name=\"video\"\n              onClick={this.toVideo}\n              style={{ color: \"#2985d0\" }}\n            >\n              <Icon name=\"video\" />\n              Videochat\n            </Menu.Item>\n            <Menu.Item\n              active={activeItem === \"users\"}\n              name=\"users\"\n              onClick={this.toList}\n              style={{ color: \"#2985d0\" }}\n            >\n              <Icon name=\"users\" />\n              Userlist\n              {this.state.isEdited ? (\n                <Icon\n                  name=\"circle thin\"\n                  size=\"tiny\"\n                  color=\"red\"\n                  style={{ marginBottom: \"10px\", marginLeft: \"2px\" }}\n                />\n              ) : null}\n            </Menu.Item>\n          </Menu>\n          {this.state.isVideo ? (\n            <div>\n              <Container\n                className=\"video-container\"\n                style={{\n                  width: \"60%\",\n                  height: \"380px\",\n                  margin: \"0px auto\",\n                  position: \"relative\",\n                  border: \"3px solid #000\"\n                }}\n              >\n                {[\"Admin\"].map(userId => {\n                  return this.currentUser.id !== userId &&\n                    this.state.isNotCalled ? (\n                    <Button\n                      icon\n                      key={userId}\n                      onClick={() => this.callTo(userId)}\n                      style={{\n                        backgroundColor: \"#2985d0\",\n                        color: \"white\",\n                        position: \"absolute\",\n                        top: \"50%\",\n                        left: \"50%\",\n                        transform: \"translate(-50%, -50%)\",\n                        zIndex: \"3\",\n                        margin: \"auto\"\n                      }}\n                    >\n                      Call {userId}\n                      <Icon name=\"phone\" />\n                    </Button>\n                  ) : null;\n                })}\n                <video\n                  className=\"my-video\"\n                  id=\"my-video\"\n                  // ref={ref => {\n                  //   this.myVideo = ref;\n                  // }}\n                  style={{\n                    width: \"130px\",\n                    position: \"absolute\",\n                    left: \"10px\",\n                    bottom: \"10px\",\n                    border: \"3px solid #0061ff\",\n                    zIndex: \"2\"\n                  }}\n                />\n                <video\n                  className=\"user-video\"\n                  id=\"user-video\"\n                  // ref={ref => {\n                  //   this.userVideo = ref;\n                  // }}\n                  style={{\n                    // position: \"absolute\",\n                    margin: \"auto\",\n                    // left: \"0\",\n                    // right: \"0\",\n                    // bottom: \"0\",\n                    // top: \"0\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    zIndex: \"1\"\n                  }}\n                />\n                <br />\n              </Container>\n              <Container\n                style={{\n                  display: \"inline-block\",\n                  textAlign: \"center\",\n                  marginTop: \"10px\",\n                  width: \"100%\"\n                }}\n              >\n                <Button animated onClick={this.sendOTP}>\n                  <Button.Content visible>\n                    <Icon name=\"send\" />\n                  </Button.Content>\n                  <Button.Content hidden>Send OTP</Button.Content>\n                </Button>\n              </Container>\n              <div>\n                {this.state.role == 1 && this.state.connectedTo ? (\n                  <Message\n                    success\n                    header=\"You are connected to\"\n                    content={this.state.connectedTo}\n                  />\n                ) : null}\n              </div>\n              <Modal\n                dimmer={dimmer}\n                open={open}\n                onClose={this.closeModalAfterApproval}\n              >\n                <Modal.Header>{userName} removed successfully!</Modal.Header>\n                <Modal.Content image>\n                  <Modal.Description>\n                    <Header>Approval</Header>\n                    <p>\n                      Please select whether the user identification was\n                      successful. If yes, he will be assigned a kycKey, if no,\n                      the user will be deleted.\n                    </p>\n                    <p>Will you approve?</p>\n                  </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                  <Button color=\"black\" floated=\"left\" onClick={this.decline}>\n                    Decline\n                  </Button>\n                  <Button\n                    positive\n                    icon=\"checkmark\"\n                    labelPosition=\"right\"\n                    content=\"Approve\"\n                    onClick={this.approval}\n                  />\n                </Modal.Actions>\n              </Modal>\n            </div>\n          ) : (\n            <div>\n              {this.state.users.map(member => (\n                <Card\n                  key={member.id}\n                  raised\n                  style={\n                    member.kycKey === \"declined\"\n                      ? {\n                          height: \"400x\",\n                          width: \"180px\",\n                          display: \"inline-block\",\n                          margin: \"18px\",\n                          border: \"1px solid red\"\n                        }\n                      : {\n                          height: \"400x\",\n                          width: \"180px\",\n                          display: \"inline-block\",\n                          margin: \"18px\"\n                        }\n                  }\n                >\n                  <Card.Content>\n                    {member.edited ? (\n                      <Icon\n                        name=\"circle thin\"\n                        size=\"small\"\n                        color=\"red\"\n                        style={{\n                          float: \"right\",\n                          marginRight: \"-21px\",\n                          marginTop: \"-19px\"\n                        }}\n                      />\n                    ) : null}\n                    <Card.Header>\n                      {member.username}\n                      {member.isRegistered == \"yes\" ? (\n                        <Icon\n                          name=\"checkmark\"\n                          color=\"green\"\n                          style={{ float: \"right\" }}\n                        />\n                      ) : (\n                        <Icon name=\"x\" color=\"red\" style={{ float: \"right\" }} />\n                      )}\n                    </Card.Header>\n                    <Card.Meta style={{ marginTop: \"2px\" }}>\n                      <span>Last Modified: {member.lastModified}</span>\n                    </Card.Meta>\n                    <Card.Description>\n                      {member.lname}, {member.fname}\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra style={{ textAlign: \"center\" }}>\n                    <Button onClick={this.selectUser.bind(this, member)}>\n                      View Profile\n                    </Button>\n                  </Card.Content>\n                </Card>\n              ))}\n              {/* </Container> */}\n              {this.state.isChosen ? (\n                <Modal dimmer={dimmer} open={open} onClose={this.closeModal}>\n                  <Modal.Header>\n                    Profile of {this.state.usrs[0].username}\n                  </Modal.Header>\n                  <Modal.Content image>\n                    <Modal.Description>\n                      <Form>\n                        {this.state.usrs.map(members => (\n                          <div>\n                            <Form.Group widths=\"equal\">\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"Username\"\n                                value={this.state.usrs[0].username}\n                              />\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"ID\"\n                                value={this.state.usrs[0].id}\n                              />\n                            </Form.Group>\n                            <Form.Group widths=\"equal\">\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"First Name\"\n                                value={this.state.usrs[0].fname}\n                              />\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"Last Name\"\n                                value={this.state.usrs[0].lname}\n                              />\n                            </Form.Group>\n                            {members.edited == \"address\" ? (\n                              <div>\n                                <Form.Group>\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"eleven\"\n                                    fluid\n                                    label=\"Street\"\n                                    value={this.state.usrs[0].street}\n                                  />\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"five\"\n                                    fluid\n                                    label=\"House Number\"\n                                    value={this.state.usrs[0].houseNr}\n                                  />\n                                </Form.Group>\n                                <Form.Group>\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"six\"\n                                    fluid\n                                    type=\"number\"\n                                    label=\"Postal Code\"\n                                    value={this.state.usrs[0].postCode}\n                                  />\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"ten\"\n                                    fluid\n                                    label=\"Place of Residence\"\n                                    value={this.state.usrs[0].placeOfRes}\n                                  />\n                                </Form.Group>\n                              </div>\n                            ) : (\n                              <div>\n                                <Form.Group>\n                                  <Form.Input\n                                    readOnly\n                                    width=\"eleven\"\n                                    fluid\n                                    label=\"Street\"\n                                    value={this.state.usrs[0].street}\n                                  />\n                                  <Form.Input\n                                    readOnly\n                                    width=\"five\"\n                                    fluid\n                                    label=\"House Number\"\n                                    value={this.state.usrs[0].houseNr}\n                                  />\n                                </Form.Group>\n                                <Form.Group>\n                                  <Form.Input\n                                    readOnly\n                                    width=\"six\"\n                                    fluid\n                                    type=\"number\"\n                                    label=\"Postal Code\"\n                                    value={this.state.usrs[0].postCode}\n                                  />\n                                  <Form.Input\n                                    readOnly\n                                    width=\"ten\"\n                                    fluid\n                                    label=\"Place of Residence\"\n                                    value={this.state.usrs[0].placeOfRes}\n                                  />\n                                </Form.Group>\n                              </div>\n                            )}\n                            <Form.Group widths=\"equal\">\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"Date of Birth\"\n                                value={this.state.usrs[0].dateOfBirth}\n                              />\n                              <Form.Input\n                                readOnly\n                                fluid\n                                label=\"Nationality\"\n                                value={this.state.usrs[0].nat}\n                              />\n                            </Form.Group>\n                            <Form.Group widths=\"equal\">\n                              {members.edited == \"email\" ? (\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  fluid\n                                  label=\"Email\"\n                                  type=\"email\"\n                                  value={this.state.usrs[0].email}\n                                />\n                              ) : (\n                                <Form.Input\n                                  readOnly\n                                  fluid\n                                  label=\"Email\"\n                                  type=\"email\"\n                                  value={this.state.usrs[0].email}\n                                />\n                              )}\n                              {members.edited == \"mobNr\" ? (\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  fluid\n                                  label=\"Mobile Number\"\n                                  type=\"number\"\n                                  value={this.state.usrs[0].mobNr}\n                                />\n                              ) : (\n                                <Form.Input\n                                  readOnly\n                                  fluid\n                                  label=\"Mobile Number\"\n                                  type=\"number\"\n                                  value={this.state.usrs[0].mobNr}\n                                />\n                              )}\n                            </Form.Group>\n                            <Form.Group width=\"sixteen\">\n                              <Form.Input\n                                width=\"sixteen\"\n                                readOnly\n                                fluid\n                                label=\"Registration Date\"\n                                value={this.state.usrs[0].regDate}\n                              />\n                            </Form.Group>\n                            <Form.Group width=\"sixteen\">\n                              <Form.Input\n                                width=\"sixteen\"\n                                readOnly\n                                fluid\n                                label=\"KycKey\"\n                                value={this.state.usrs[0].kycKey}\n                              />\n                            </Form.Group>\n                            {this.state.ethAddresses.length > 0 ? (\n                              <p style={{ fontWeight: \"bold\" }}>\n                                EthAddresses which requested the KycKey\n                              </p>\n                            ) : null}\n\n                            {/* {this.state.ethAddresses.map((ethAddress) => (\n                                <Form.Group width=\"sixteen\">\n                                  <Form.Input\n                                    width=\"sixteen\"\n                                    readOnly\n                                    fluid\n                                    // label={i}\n                                    value={ethAddress}\n                                  />\n                                </Form.Group>\n                              ))} */}\n\n                            {this.state.ethAddressArray}\n\n                            <p style={{ fontWeight: \"bold\" }}>Identity Card</p>\n                            <Form.Group\n                              widths=\"equal\"\n                              style={{ margin: \"0px auto\" }}\n                            >\n                              {/* <Grid width={16}>\n                        <Grid.Column> */}\n                              <a\n                                href={`../static/${this.state.img1}`}\n                                target=\"_blank\"\n                                style={{ width: \"50%\" }}\n                              >\n                                <img\n                                  className=\"img-responsive\"\n                                  src={`../static/${this.state.img1}`}\n                                  style={{\n                                    width: \"200px\",\n                                    height: \"113px\"\n                                    // float: \"left\"\n                                  }}\n                                />\n                              </a>\n                              {/* </Grid.Column>\n                        <Grid.Column> */}\n                              <a\n                                href={`../static/${this.state.img1}`}\n                                target=\"_blank\"\n                              >\n                                <img\n                                  className=\"img-responsive\"\n                                  src={`../static/${this.state.img2}`}\n                                  style={{\n                                    width: \"200px\",\n                                    height: \"113px\"\n                                    // float: \"right\"\n                                  }}\n                                />\n                              </a>\n                              {/* </Grid.Column> */}\n                              {/* </Grid> */}\n                            </Form.Group>\n                            {this.state.usrs[0].isComp == \"1\" ? (\n                              <div>\n                                <Form.Group style={{ marginTop: \"10px\" }}>\n                                  {members.edited == \"compName\" ? (\n                                    <Form.Input\n                                      error\n                                      readOnly\n                                      width=\"sixteen\"\n                                      fluid\n                                      label=\"Company Name\"\n                                      value={this.state.usrs[0].compName}\n                                    />\n                                  ) : (\n                                    <Form.Input\n                                      readOnly\n                                      width=\"sixteen\"\n                                      fluid\n                                      label=\"Company Name\"\n                                      value={this.state.usrs[0].compName}\n                                    />\n                                  )}\n                                </Form.Group>\n                                {members.edited == \"compAddress\" ? (\n                                  <div>\n                                    <Form.Group>\n                                      <Form.Input\n                                        error\n                                        readOnly\n                                        width=\"eleven\"\n                                        fluid\n                                        label=\"Business Address\"\n                                        value={this.state.usrs[0].businessAd}\n                                      />\n                                      <Form.Input\n                                        error\n                                        readOnly\n                                        width=\"five\"\n                                        fluid\n                                        label=\"House Number\"\n                                        value={this.state.usrs[0].compHouseNr}\n                                      />\n                                    </Form.Group>\n                                    <Form.Group widths=\"equal\">\n                                      <Form.Input\n                                        error\n                                        readOnly\n                                        width=\"six\"\n                                        fluid\n                                        label=\"Postal Code\"\n                                        value={this.state.usrs[0].compPostCode}\n                                      />\n                                      <Form.Input\n                                        error\n                                        readOnly\n                                        width=\"ten\"\n                                        fluid\n                                        label=\"Place of Residenz\"\n                                        value={this.state.usrs[0].residence}\n                                      />\n                                    </Form.Group>\n                                  </div>\n                                ) : (\n                                  <div>\n                                    <Form.Group>\n                                      <Form.Input\n                                        readOnly\n                                        width=\"eleven\"\n                                        fluid\n                                        label=\"Business Address\"\n                                        value={this.state.usrs[0].businessAd}\n                                      />\n                                      <Form.Input\n                                        readOnly\n                                        width=\"five\"\n                                        fluid\n                                        label=\"House Number\"\n                                        value={this.state.usrs[0].compHouseNr}\n                                      />\n                                    </Form.Group>\n                                    <Form.Group widths=\"equal\">\n                                      <Form.Input\n                                        readOnly\n                                        width=\"six\"\n                                        fluid\n                                        label=\"Postal Code\"\n                                        value={this.state.usrs[0].compPostCode}\n                                      />\n                                      <Form.Input\n                                        readOnly\n                                        width=\"ten\"\n                                        fluid\n                                        label=\"Place of Residenz\"\n                                        value={this.state.usrs[0].residence}\n                                      />\n                                    </Form.Group>\n                                  </div>\n                                )}\n                                <Form.Group\n                                  width=\"sixteen\"\n                                  style={{ margin: \"0px auto\" }}\n                                >\n                                  <Icon name=\"linkify\" />\n                                  <a\n                                    href={`../static/${this.state.doc1}`}\n                                    type=\"application/pdf\"\n                                    target=\"_blank\"\n                                  >\n                                    View extract of the relevant registration\n                                    authority\n                                  </a>\n                                </Form.Group>\n                                <Form.Group\n                                  width=\"sixteen\"\n                                  style={{ margin: \"0px auto\" }}\n                                >\n                                  <Icon name=\"linkify\" />\n                                  <a\n                                    href={`../static/${this.state.doc2}`}\n                                    type=\"application/pdf\"\n                                    target=\"_blank\"\n                                  >\n                                    View electronic copy of the power of\n                                    attorney\n                                  </a>\n                                </Form.Group>\n                              </div>\n                            ) : null}\n                          </div>\n                        ))}\n                      </Form>\n                    </Modal.Description>\n                  </Modal.Content>\n                  <Modal.Actions>\n                    <Container\n                      style={{ textAlign: \"center\", display: \"inline-block\" }}\n                    >\n                      <Button color=\"black\" onClick={this.closeModal}>\n                        Close\n                      </Button>\n                    </Container>\n                  </Modal.Actions>\n                </Modal>\n              ) : null}\n            </div>\n          )}\n          <Container style={{ width: \"100%\" }}>\n            <Head>\n              <link\n                rel=\"stylesheet\"\n                href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css\"\n              />\n            </Head>\n            <style>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n          </Container>\n        </Segment>\n        {/* </Layout> */}\n      </div>\n    );\n  }\n}\n\nexport default adminPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA4SA;AAAA;AAAA;AAAA;AACA;AACA;AA9SA;AAgTA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AA7CA;AA8CA;AACA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAIA;AACA;AACA;AANA;AAAA;AAQA;AACA;AAFA;AACA;AARA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;AAyBA;AAEA;AAAA;AACA;;AAHA;AAIA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;AAEA;AACA;;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;;;;;;AACA;;;AAEA;AACA;AADA;AACA;;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AALA;AASA;AACA;AACA;;;;;;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;AAEA;AACA;AADA;AACA;;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;AACA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACA;AACA;AADA;AACA;;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AA+BA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AAGA;AACA;;AACA;AACA;AACA;AAFA;AACA;;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AADA;AACA;;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAJA;AAgBA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AANA;AAgBA;AACA;AAEA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AANA;AAqBA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAHA;AAMA;AAAA;AAYA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAYA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAJA;AAZA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAeA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAtDA;AA8DA;AAAA;AAAA;AAAA;AAIA;AAAA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAaA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAeA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAlWA;AAoXA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAeA;;;;AAn/BA;AACA;AAq/BA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}