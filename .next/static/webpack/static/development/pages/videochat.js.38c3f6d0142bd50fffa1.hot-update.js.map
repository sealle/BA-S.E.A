{"version":3,"file":"static/webpack/static/development/pages/videochat.js.38c3f6d0142bd50fffa1.hot-update.js","sources":["webpack:///./components/VideoChat.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ProfileHeader from \"../components/ProfileHeader\";\nimport Layout from \"../components/Layout\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\nimport { Header, Message, Segment, Button, Icon } from \"semantic-ui-react\";\nimport { getCookie } from \"../utils/CookieUtils\";\nimport jwtDecode from \"jwt-decode\";\nimport getCurrentUser from \"../utils/UserUtils\";\nimport axios from \"axios\";\nimport { Router } from \"../routes\";\n\nlet xsrfToken = \"\";\nlet pusher;\nlet channelName;\n\nexport default class VideoChat extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hasMedia: false,\n      userName: \"\",\n      otherUserId: null,\n      connectedTo: \"\"\n    };\n\n    this.currentUser = {\n      id: \"\",\n      stream: undefined\n    };\n\n    this.peers = [];\n\n    this.mediaHandler = new MediaHandler();\n    // this.setupPusher();\n\n    this.callTo = this.callTo.bind(this);\n    this.setupPusher = this.setupPusher.bind(this);\n    this.startPeer = this.startPeer.bind(this);\n  }\n\n  async componentWillMount() {\n    try {\n      const response = await axios.post(\n        window.location.origin + \"/videochat/stream\",\n        { timeout: 60 * 4 * 1000 }\n      );\n      this.setState({ userName: response.data.currentUser });\n      this.currentUser.id = this.state.userName;\n      xsrfToken = response.data.token;\n    } catch (e) {\n      console.log(e);\n    }\n\n    // this.currentUser.id = getCurrentUser();\n\n    console.log(this.currentUser.id);\n\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      console.log(stream);\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    this.setupPusher();\n    return;\n  }\n\n  async setupPusher() {\n    Pusher.logToConsole = true;\n    pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.currentUser.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    channelName = pusher.subscribe(\"presence-video-channel\"); //requires auth\n\n    channelName.bind(\"pusher:subscription_succeeded\", () => {\n      console.log(channelName.members);\n    });\n\n    channelName.bind(\"pusher:member_added\", member => {\n      this.setState({ connectedTo: member.id });\n      console.log(member.id);\n    });\n    await channelName.bind(`client-signal-${this.currentUser.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        this.setState({ otherUserId: signal.userId });\n        peer = this.startPeer(signal.userId, false);\n\n        //callee //if offer is sent, stop!\n      }\n      // setTimeout(function() {\n      peer.signal(signal.data);\n      console.log(\"fuckfuckfuck\");\n      // }, 5000);\n    });\n    return;\n  }\n\n  startPeer(userId, initiator = true) {\n    //caller\n    //TODO: initiator is always user!\n    const peer = new Peer({\n      initiator,\n      stream: this.currentUser.stream,\n      trickle: false\n    });\n    console.log(\"creating new peer\");\n    console.log(peer);\n    console.log(initiator);\n\n    peer.on(\"signal\", data => {\n      //initiator\n      channelName.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.currentUser.id, //send event to callee from caller, caller receives event\n        data: data,\n        renegotiate: false\n      });\n      console.log(\"sending offer\"); //callee: sends offer instead of answer!!!\n      console.log(data);\n    });\n\n    peer.on(\"stream\", stream => {\n      try {\n        let userVideo = document.getElementById(\"user-video\");\n        userVideo.srcObject = stream;\n        console.log(\"users mediastream\");\n        console.log(stream);\n        const playPromise = userVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return userVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    peer.on(\"close\", function() {\n      let peer = this.peers[userId];\n      if (peer) {\n        peer.destroy();\n      }\n      this.peers[UserId] = undefined;\n    });\n    return peer;\n  }\n\n  callTo(userId) {\n    console.log(`starting Pusher: ${userId}`);\n    this.peers[userId] = this.startPeer(userId);\n  }\n\n  endCall() {\n    channelName.unbind();\n    this.setState({ hasMedia: false });\n    pusher.disconnect;\n    Router.push(\"/login\");\n  }\n\n  render() {\n    return (\n      <div>\n        <Layout>\n          <Segment style={{ marginTop: \"50px\" }}>\n            <br />\n            <Header as=\"h1\" textAlign=\"center\" style={{ color: \"#2985d0\" }}>\n              Video Chat\n            </Header>\n            {[\"Admin\"].map(userId => {\n              return this.currentUser.id !== userId ? (\n                <Button\n                  fluid\n                  icon\n                  key={userId}\n                  onClick={() => this.callTo(userId)}\n                  style={{ backgroundColor: \"#2985d0\" }}\n                >\n                  Call {userId}\n                  <Icon name=\"phone\" />\n                </Button>\n              ) : null;\n            })}\n            <button onClick={this.endCall.bind(this)}>end call</button>\n\n            <div\n              className=\"video-container\"\n              style={{\n                width: \"100%\",\n                height: \"380px\",\n                margin: \"0px auto\",\n                position: \"relative\",\n                border: \"3px solid #000\"\n              }}\n            >\n              <video\n                className=\"my-video\"\n                id=\"my-video\"\n                // ref={ref => {\n                //   this.myVideo = ref;\n                // }}\n                style={{\n                  width: \"130px\",\n                  position: \"absolute\",\n                  left: \"10px\",\n                  bottom: \"10px\",\n                  border: \"3px solid #0061ff\",\n                  zIndex: \"2\"\n                }}\n              />\n              <video\n                className=\"user-video\"\n                id=\"user-video\"\n                // ref={ref => {\n                //   this.userVideo = ref;\n                // }}\n                style={{\n                  // position: \"absolute\",\n                  margin: \"auto\",\n                  // left: \"0\",\n                  // right: \"0\",\n                  // bottom: \"0\",\n                  // top: \"0\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  zIndex: \"1\"\n                }}\n              />\n              {/*TODO: Who are you connected with?*/}\n            </div>\n            <Message\n              success\n              header=\"You are connected to\"\n              content={this.state.connectedTo}\n            />\n          </Segment>\n        </Layout>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAtBA;AAuBA;AACA;;;;;;;;;;;;;;;;AAGA;AAEA;AAAA;AACA;;AAHA;AAIA;AAAA;AAAA;AACA;AACA;;;;;;;AAEA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AAEA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AANA;AAgBA;AACA;AAEA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AANA;AAqBA;AACA;AACA;AAHA;AASA;;;;AAjQA;AACA;;;;;A","sourceRoot":""}