{"version":3,"file":"static/webpack/static/development/pages/videochat.js.ebdc71633c22bb16d382.hot-update.js","sources":["webpack:///./pages/videochat.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ProfileHeader from \"../components/ProfileHeader\";\nimport Layout from \"../components/Layout\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\nimport { Header, Message } from \"semantic-ui-react\";\nimport { getCookie } from \"../utils/CookieUtils\";\nimport jwtDecode from \"jwt-decode\";\nimport getCurrentUser from \"../utils/UserUtils\";\nimport axios from \"axios\";\n\nlet xsrf = \"\";\n\nlet user = {\n  id: \"\"\n};\nlet xsrfToken = \"\";\n\nexport default class VideoChatPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasMedia: false,\n      otherUserId: \"\",\n      memberId: \"\"\n    };\n\n    this.user = user;\n    this.user.stream = null;\n    this.peers = {};\n\n    this.mediaHandler = new MediaHandler();\n    this.setupPusher();\n\n    this.callTo = this.callTo.bind(this);\n    this.setupPusher = this.setupPusher.bind(this);\n    this.startPeer = this.startPeer.bind(this);\n  }\n\n  async componentWillMount() {\n    try {\n      const response = await axios.post(\n        window.location.origin + \"/currentuser\"\n      );\n      xsrf = response.data.token;\n      user.id = response.data.currentUser;\n      xsrfToken = xsrf;\n    } catch (e) {\n      console.log(e);\n    }\n\n    console.log(this.user.id);\n    console.log(xsrfToken);\n\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.user.stream = stream;\n\n      try {\n        this.myVideo.srcObject = stream;\n      } catch (e) {\n        this.myVideo.src = URL.createObjectURL(stream);\n      }\n\n      this.myVideo.play();\n    });\n  }\n\n  setupPusher() {\n    //TODO: Pusher only one way: User->Admin\n    Pusher.logToConsole = true;\n    this.pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.user.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    this.channel = this.pusher.subscribe(\"presence-video-channel\"); //presence: requires auth!\n\n    // this.channel.bind(\"pusher:subscription_succeeded\", function() {\n    //   console.log(\"success\");\n    // });\n    // this.channel.bind(\"pusher:member_removed\", function(members) {\n    //   console.log(member.id + \"removed\");\n    // });\n    // this.channel.bind(\"pusher:member_added\", function(members) {\n    //   console.log(member.id + \"added\");\n    // });\n\n    this.channel.bind(`client-signal-${this.user.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        this.setState({ otherUserId: signal.userId });\n        peer = this.startPeer(signal.userId, false);\n      }\n\n      peer.signal(signal.data);\n    });\n  }\n\n  startPeer(userId, initiator = true) {\n    //TODO: initiator is always user!\n    const peer = new Peer({\n      initiator,\n      stream: this.user.stream,\n      trickle: false\n    });\n\n    peer.on(\"signal\", data => {\n      this.channel.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.user.id,\n        data: data\n      });\n    });\n\n    peer.on(\"stream\", stream => {\n      try {\n        this.myVideo.srcObject = stream; //bug -> why is the stream reloading?\n      } catch (e) {\n        this.myVideo.src = URL.createObjectURL(stream);\n      }\n\n      this.myVideo.play();\n    });\n\n    peer.on(\"close\", () => {\n      let peer = this.peers[userId];\n      if (peer !== undefined) {\n        peer.destroy(err);\n      }\n\n      this.peers[userId] = undefined;\n    });\n    return peer;\n  }\n\n  callTo(userId) {\n    this.peers[userId] = this.startPeer(userId);\n  }\n\n  render() {\n    return (\n      <div>\n        <ProfileHeader />\n        <Layout>\n          <Header as=\"h1\" style={{ textAlign: \"center\", marginTop: \"30px\" }}>\n            Video Chat\n          </Header>\n          {[\"Sebster\", \"sdfg\"].map(userId => {\n            return this.user.id !== userId ? (\n              <button key={userId} onClick={() => this.callTo(userId)}>\n                Call {userId}\n              </button>\n            ) : null;\n          })}\n          <div\n            className=\"video-container\"\n            style={{\n              width: \"650px\",\n              height: \"380px\",\n              margin: \"0px auto\",\n              position: \"relative\",\n              border: \"3px solid #000\"\n            }}\n          >\n            <video\n              className=\"my-video\"\n              ref={ref => {\n                this.myVideo = ref;\n              }}\n              style={{\n                width: \"130px\",\n                position: \"absolute\",\n                left: \"10px\",\n                bottom: \"10px\",\n                border: \"3px solid #0061ff\",\n                zIndex: \"2\"\n              }}\n            />\n            <video\n              className=\"user-video\"\n              ref={ref => {\n                this.userVideo = ref;\n              }}\n              style={{\n                position: \"absolute\",\n                left: \"0\",\n                right: \"0\",\n                bottom: \"0\",\n                top: \"0\",\n                width: \"100%\",\n                height: \"100%\",\n                zIndex: \"1\"\n              }}\n            />\n            {/*TODO: Who are you connected with?*/}\n          </div>\n          <Message\n            success\n            header=\"You are connected to\"\n            content={this.state.memberId}\n          />\n          {/* <VideoChat /> */}\n        </Layout>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjBA;AAkBA;AACA;;;;;;;;;;;;;;;;AAGA;AACA;;AADA;AAGA;AACA;AACA;;;;;;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AALA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AALA;AAmBA;AACA;AACA;AAHA;AASA;;;;AAnMA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}