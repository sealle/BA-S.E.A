{"version":3,"file":"static/webpack/1.ec4abe765ab912461e76.hot-update.js","sources":["webpack:///./components/Admin.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport MediaHandler from \"../webrtc/MediaHandler\";\nimport Pusher from \"pusher-js\";\nimport Peer from \"simple-peer\";\nconst APP_KEY = \"0f924dcd44dc93a88aa7\"; //Pusher Key\nimport { setCookie } from \"../utils/CookieUtils\";\nimport { authenticator } from \"otplib/otplib-browser\";\nimport { Tesseract } from \"tesseract.ts\";\nconst parse = require(\"mrz\").parse;\nimport RecordRTC from \"recordrtc\";\nconst StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\nimport Carousel from \"nuka-carousel\";\nimport ReactCrop from \"react-image-crop\";\nimport \"!style-loader!css-loader!react-image-crop/dist/ReactCrop.css\";\nimport web3 from \"../ethereum/src/web3\";\nimport contract from \"../ethereum/src/contract\";\nimport {\n  Message,\n  Segment,\n  Button,\n  Icon,\n  Container,\n  Grid,\n  Modal,\n  Menu,\n  Card,\n  Accordion,\n  Form\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Router } from \"../routes\";\nimport swal from \"sweetalert2\";\nimport { MultiStreamsMixer } from 'multistreamsmixer';\nlet xsrfToken = \"\";\nlet pusher;\nlet peer;\nlet channelName;\nlet userName;\nlet userNames = [];\nlet recordRTC;\nlet firstMember;\n\n//Videochat and User list\nexport default class Admin extends Component {\n  constructor() {\n    super();\n    this.imageCropPreviewCanvasRef = React.createRef();\n    this.state = {\n      hasMedia: false,\n      userName: \"\",\n      role: 1,\n      isNotCalled: \"true\",\n      message: \"\",\n      loading: false,\n      isEdited: \"\",\n      activeItem: \"videochat\",\n      ethAddresses: [],\n      sent: false,\n      idIsValid: \"\",\n      users: [],\n      disableButton: true,\n      isRecording: \"\",\n      snapshotMessage: \"\",\n      activeItem: \"videochat\",\n      isVideo: true,\n      crop: {\n        x: 0,\n        y: 60,\n        width: 100,\n        height: 40\n      }\n    };\n\n    this.currentUser = {\n      id: \"\",\n      stream: undefined\n    };\n\n    this.peers = [];\n\n    this.mediaHandler = new MediaHandler();\n  }\n\n  async componentWillMount() {\n    setInterval(async () => {\n      try {\n        const response = await axios.post(window.location.origin + \"/userlist\");\n        if (response.data.success) {\n          this.setState({ users: response.data.userData });\n          for (let i = 0; i < this.state.users.length; i++) {\n            if (this.state.users[i].edited) {\n              this.setState({ isEdited: this.state.users[i].edited });\n            }\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }, 1000);\n\n    //request user data from server\n    try {\n      const response = await axios.post(\n        window.location.origin + \"/videochat/stream\"\n      );\n      this.setState({\n        userName: response.data.currentUser,\n        role: response.data.role\n      });\n      this.currentUser.id = this.state.userName;\n      xsrfToken = response.data.token;\n    } catch (e) {\n      console.log(e);\n    }\n\n    //ask for permission to allow microphone and webcam\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n    this.setupPusher();\n    return;\n  }\n\n  //get data of the selected user in the user list\n  selectUser = async (member, e, dimmer) => {\n    let currentUser = member.username;\n    try {\n      const response = await axios.post(window.location.origin + \"/usrs\", {\n        currentUser\n      });\n      if (response.data.success) {\n        this.setState({\n          usrs: response.data.userData,\n          beneficialOwners: response.data.beneficialOwners\n        });\n        //get Array of ethAddresses\n        for (let i = 1; i < this.state.usrs.length; i++) {\n          this.state.ethAddresses[i] = this.state.usrs[i].ethAddress;\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    this.setState({ dimmer, open: true, isChosen: true });\n  };\n\n  //close user preview modal\n  closeModal = async () => {\n    let userName = this.state.usrs[0].username;\n    //when closed, change edit state in DB\n    let response = await axios.post(window.location.origin + \"/changeEdit\", {\n      userName\n    });\n    if (response.data.success) {\n      this.setState({ open: false, ethAddresses: [] });\n      let a = false;\n      for (let i = 0; i < this.state.users.length; i++) {\n        if (!this.state.users[i].edited) {\n          this.setState({ isEdited: null });\n        }\n      }\n    }\n  };\n\n  //admin accesses user list\n  toList = () => {\n    this.setState({ isVideo: false, activeItem: \"users\" });\n  };\n\n  //admin accesses video chat\n  toVideo = () => {\n    this.setState({ isVideo: true, activeItem: \"videochat\" });\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({ hasMedia: true });\n      this.currentUser.stream = stream;\n      try {\n        let myVideo = document.getElementById(\"my-video\");\n        myVideo.srcObject = stream;\n        const playPromise = myVideo.play();\n\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return myVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n  };\n\n  //open modal when selectUser() is triggered\n  show = dimmer => {\n    this.setState({ dimmer, open: true });\n  };\n\n  handleAccordionClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    this.setState({ activeIndex: newIndex });\n  };\n\n  //setting up pusher API\n  setupPusher = () => {\n    // Pusher.logToConsole = true;\n    pusher = new Pusher(APP_KEY, {\n      authEndpoint: \"/pusher/auth\",\n      cluster: \"eu\",\n      auth: {\n        params: this.currentUser.id,\n        headers: {\n          \"X-XSRF-Token\": xsrfToken\n        }\n      }\n    });\n\n    //create new presence-channel\n    channelName = pusher.subscribe(\"presence-video-channel\"); //requires auth\n\n    //get members in channel\n    channelName.bind(\"pusher:subscription_succeeded\", members => {\n      //get id of Admin from the object\n      firstMember = Object.keys(members.members)[0];\n    });\n\n    //listener for added members to the channel\n    channelName.bind(\"pusher:member_added\", member => {\n      swal(\"You are conneted to\", `${member.id}`, \"success\"); //Only Admin!!\n      if (userNames.includes(member.id) === false) {\n        userNames.push(member.id);\n      }\n      console.log(userNames);\n    });\n\n    //listener for added members to the channel\n    channelName.bind(\"pusher:member_removed\", member => {\n      console.log(userName);\n      let i = userNames.indexOf(userName);\n      userNames.splice(i, 1);\n      console.log(userNames);\n      this.setState({\n        img1: !this.state.img1,\n        showMrzValidationButton: !this.state.showMrzValidationButton,\n        disableButton: true,\n        disableUserList: false\n      });\n    });\n\n    //bind client signal to channel\n    //this is executed for the callee when the initiator triggers a call\n    channelName.bind(`client-signal-${this.currentUser.id}`, signal => {\n      let peer = this.peers[signal.userId];\n      // if peer does not already exist, we got an incoming call\n      if (peer === undefined) {\n        //start peer where initiator = false\n        peer = this.startPeer(signal.userId, false);\n        //callee //if offer is sent, stop!\n      }\n      peer.signal(signal.data);\n    });\n\n    channelName.bind(`client-message-${this.currentUser.id}`, message => {\n      setCookie(\"x-access-token\", \"\", -60 * 60);\n      window.location.href = \"/login\";\n      Router.push(\"/login\");\n    });\n\n    channelName.bind(`client-approval-${this.currentUser.id}`, message => {\n      swal({\n        title: \"Success!\",\n        text: \"The user has entered the correct OTP\",\n        type: \"success\",\n        confirmButtonText: \"Confirm\",\n        onClose: () => {\n          //Stop audio recording and send .wav file to server\n          recordRTC.stopRecording(async () => {\n            let formData = new FormData();\n            let recordedBlob = recordRTC.getBlob();\n            console.log(recordedBlob);\n            let fileName = `${userName}.wav`;\n            let file = new File([recordedBlob], fileName, {\n              mimeType: \"audio/wav\"\n            });\n            console.log(file);\n            formData.append(\"fileName\", fileName);\n            formData.append(\"file\", file);\n            formData.append(\"userName\", userName);\n            this.setState({ isRecording: \"\" });\n            let response = await axios.post(\n              window.location.origin + \"/approval\",\n              formData\n            );\n            if (response.data.success) {\n              let accounts = await web3.eth.getAccounts();\n              let fname = response.data.fname;\n              let lname = response.data.lname;\n              let idNum = response.data.idNum;\n              let kycKey = response.data.kycKey;\n              console.log(fname, lname, idNum, kycKey);\n              let hash = web3.utils.soliditySha3(\n                `${fname} ${lname} ${idNum} ${kycKey}`\n              );\n              contract.methods.storeHash(hash).send({\n                from: accounts[0]\n              });\n            } else {\n              console.log(\"error\");\n            }\n          });\n        }\n      });\n    });\n  };\n\n  //connect to peer\n  startPeer = (userId, initiator = true) => {\n    //create new Peer\n    peer = new Peer({\n      initiator,\n      stream: this.currentUser.stream,\n      trickle: false\n    });\n\n    // peer._debug = console.log;\n\n    //sends offer signal to peer\n    //connection established when peer sends answer\n    peer.on(\"signal\", data => {\n      channelName.trigger(`client-signal-${userId}`, {\n        type: \"signal\",\n        userId: this.currentUser.id,\n        data: data\n      });\n    });\n\n    //when the connection is established get the peer's audio/video stream\n    peer.on(\"stream\", stream => {\n      try {\n        let userVideo = document.getElementById(\"user-video\");\n        userVideo.srcObject = stream;\n        const playPromise = userVideo.play();\n        if (playPromise !== null) {\n          playPromise\n            .then(() => {\n              return userVideo.play();\n            })\n            .catch(e => {\n              console.log(e);\n            });\n        }\n        //send both streams to MultiStreamsMixer\n        let audioMixer = new MultiStreamsMixer([this.currentUser.stream, stream])\n        //start recording the mixed streams\n        recordRTC = RecordRTC(audioMixer.getMixedStream(), {\n          recorderType: StereoAudioRecorder,\n          mimeType: \"audio/wav\"\n        });\n        //start recording\n        recordRTC.startRecording();\n        this.setState({ isRecording: \"Recording...\" });\n      } catch (e) {\n        console.log(e.stack);\n      }\n    });\n\n    return peer;\n  };\n\n  //triggers the call to peer\n  callTo = async userId => {\n    this.setState({\n      isNotCalled: false,\n      disableButton: false,\n      disableUserList: true\n    });\n    this.peers[userId] = this.startPeer(userId);\n    let currentUser = userId;\n    console.log(userId);\n    //get the peer's data\n    let response = await axios.post(\n      window.location.origin + \"/videochat/user\",\n      {\n        currentUser\n      }\n    );\n    if (response.data.success) {\n      this.setState({\n        users: response.data.userData,\n        img1: response.data.img1,\n        img2: response.data.img2\n      });\n    }\n    console.log(this.state.img1);\n  };\n\n  //decline user while video chat\n  decline = async () => {\n    this.setState({ declineLoading: true });\n    //destroy P2P connection\n    peer.destroy();\n    //stop audio recording\n    recordRTC.stopRecording(async () => {\n      let formData = new FormData();\n      let recordedBlob = recordRTC.getBlob();\n      console.log(recordedBlob);\n      let fileName = `${userName}.wav`;\n      //convert recorded blob to a file and send it to the server\n      let file = new File([recordedBlob], fileName, { mimeType: \"audio/wav\" });\n      console.log(file);\n      formData.append(\"fileName\", fileName);\n      formData.append(\"file\", file);\n      formData.append(\"userName\", userName);\n      this.setState({ isRecording: \"\" });\n      let response = await axios.post(\n        window.location.origin + \"/decline\",\n        formData\n      );\n      if (response.data.success) {\n        swal(\"User declined\", \"\", \"success\");\n        // this.setState({ isCalled: false});\n        channelName.trigger(`client-message-${userName}`, {\n          message: \"You have been declined!\"\n        });\n      } else {\n        console.log(\"something went wrong!\");\n      }\n    });\n    this.setState({ declineLoading: false });\n  };\n\n  //send OTP to server to be sent via email to the user\n  sendOTP = async () => {\n    this.setState({ loading: true });\n    //genereate a otp secret\n    let otpSecret = authenticator.generateSecret();\n    console.log(otpSecret);\n    //generate otp\n    let otpToken = authenticator.generate(otpSecret);\n    console.log(otpToken);\n    console.log(userName);\n    let formData = new FormData();\n    formData.append(\"otpToken\", otpToken);\n    formData.append(\"userName\", userName);\n    let response = await axios.post(\n      window.location.origin + \"/createOTP\",\n      formData\n    );\n    if (response.data.success) {\n      swal(\"OTP sent!\", \"\", \"success\");\n      this.setState({\n        // isCalled: false,\n        loading: false\n      });\n    } else {\n      console.log(\"error\");\n    }\n  };\n\n  //scan the mrz code and verify it\n  ocrScan = () => {\n    this.setState({ loadingOCR: true });\n    //get cropped image from canvas\n    let image = document.getElementById(\"mrz-code\");\n    //use tesseract to read the mrz code\n    Tesseract.recognize(image).then((result, err) => {\n      if (err) {\n        console.log(err);\n      }\n      let ocrLines = [];\n      if (this.state.users[0].idType === \"id\") {\n        //prepare data for identity card mrz verification\n        let ocrText1 = JSON.stringify(result.text).substring(1, 31);\n        let ocrText2 = JSON.stringify(result.text).substring(33, 63);\n        let ocrText3 = JSON.stringify(result.text).substring(65, 95);\n        ocrLines.push(ocrText1, ocrText2, ocrText3);\n      } else {\n        //prepare data for drivers license mrz verification\n        let ocrText1 = JSON.stringify(result.text).substring(1, 10);\n        let ocrText2 = JSON.stringify(result.text).substring(12, 42);\n        let ocrText3 = JSON.stringify(result.text).substring(44, 74);\n        ocrLines.push(ocrText1, ocrText2, ocrText3);\n      }\n\n      //verify mrz code\n      let res = parse(ocrLines);\n      if (res.valid === true) {\n        this.setState({ idIsValid: true });\n      } else {\n        this.setState({ idIsValid: false });\n      }\n      this.setState({\n        loadingOCR: false,\n        ocr: result.text,\n        ocrFormat: res.format\n      });\n    });\n  };\n\n  //handle crop change for first image in carousel\n  handleOnCropChange1 = crop => {\n    this.setState({ crop: crop });\n  };\n\n  //handle image loaded for first image in carousel\n  handleImageLoaded1 = image => {\n    console.log(image);\n  };\n\n  //handle crop complete for first image in carousel\n  handleOnCropComplete1 = (crop, pixelCrop) => {\n    this.setState({ showMrzValidationButton: true });\n    //get canvas, the image and the pixelCrop\n    const canvasRef = this.imageCropPreviewCanvasRef.current;\n    let image1 = \"static/\" + this.state.img1;\n    this.cropImage(canvasRef, image1, pixelCrop);\n  };\n\n  //handle crop change for second image in carousel\n  handleOnCropChange2 = crop => {\n    this.setState({ crop: crop });\n  };\n\n  //handle image loaded for second image in carousel\n  handleImageLoaded2 = image => {\n    console.log(\"image\");\n  };\n\n  //handle crop complete for second image in carousel\n  handleOnCropComplete2 = (crop, pixelCrop) => {\n    this.setState({ showMrzValidationButton: true });\n    //get canvas, the image and the pixelCrop\n    const canvasRef = this.imageCropPreviewCanvasRef.current;\n    let image2 = \"static/\" + this.state.img2;\n    this.cropImage(canvasRef, image2, pixelCrop);\n  };\n\n  //crop image to canvas\n  cropImage = (canvasRef, image64, pixelCrop) => {\n    const canvas = canvasRef;\n    canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height;\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = image64;\n    image.onload = function() {\n      ctx.drawImage(\n        image,\n        pixelCrop.x,\n        pixelCrop.y,\n        pixelCrop.width,\n        pixelCrop.height,\n        0,\n        0,\n        pixelCrop.width,\n        pixelCrop.height\n      );\n    };\n  };\n\n  //Set initial Height of Nuka-Carousel to not null\n  handleLoadImage = () => {\n    this.carouselRef.setDimensions();\n  };\n\n  //take snapshot from user-video\n  //convert image to Blob and then into a file\n  //send file to server\n  takeSnapshot = async () => {\n    let img = document.getElementById(\"user-video\");\n    let canvas = document.getElementById(\"snapshot\");\n    let context = canvas.getContext(\"2d\");\n    context.drawImage(img, 0, 0, 500, 300);\n    canvas.toBlob(async blob => {\n      let imageName = `${userName}.png`;\n      let image = new File([blob], imageName, {\n        mimeType: \"image/png\"\n      });\n      let formData = new FormData();\n      formData.append(\"imageName\", imageName);\n      formData.append(\"image\", image);\n      formData.append(\"userName\", userName);\n      let response = await axios.post(\n        window.location.origin + \"/storeSnapshot\",\n        formData\n      );\n      if (response.data.success) {\n        console.log(\"success\");\n        this.setState({snapshotMessage:\"Snapshot saved!\"})\n      } else {\n        console.log(\"error\");\n      }\n    });\n  };\n\n  render() {\n    const { activeIndex } = this.state;\n    const { open, dimmer, activeItem } = this.state;\n    return (\n      <div>\n        <style>{`\n        body {\n          background: #e6e6e6;\n        }\n      `}</style>\n        {this.state.role == 1 ? (\n          <Menu pointing secondary>\n            <Menu.Item\n              active={activeItem === \"videochat\"}\n              name=\"video\"\n              onClick={this.toVideo}\n              style={{ color: \"#2985d0\" }}\n            >\n              <Icon name=\"video\" />\n              Videochat\n            </Menu.Item>\n            {this.state.disableUserList ? (\n              <Menu.Item\n                disabled\n                active={activeItem === \"users\"}\n                name=\"users\"\n                onClick={this.toList}\n                style={{ color: \"#2985d0\" }}\n              >\n                <Icon name=\"users\" />\n                Userlist\n                {this.state.isEdited ? (\n                  <Icon\n                    name=\"circle thin\"\n                    size=\"tiny\"\n                    color=\"red\"\n                    style={{ marginBottom: \"10px\", marginLeft: \"2px\" }}\n                  />\n                ) : null}\n              </Menu.Item>\n            ) : (\n              <Menu.Item\n                active={activeItem === \"users\"}\n                name=\"users\"\n                onClick={this.toList}\n                style={{ color: \"#2985d0\" }}\n              >\n                <Icon name=\"users\" />\n                Userlist\n                {this.state.isEdited ? (\n                  <Icon\n                    name=\"circle thin\"\n                    size=\"tiny\"\n                    color=\"red\"\n                    style={{ marginBottom: \"10px\", marginLeft: \"2px\" }}\n                  />\n                ) : null}\n              </Menu.Item>\n            )}\n          </Menu>\n        ) : null}\n        {this.state.isVideo ? (\n          //videochat\n          <div>\n            <Segment style={{ marginTop: \"16px\", width: \"100%\" }}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width={8}>\n                    <Container\n                      className=\"video-container\"\n                      style={{\n                        width: \"500px\",\n                        height: \"380px\",\n                        margin: \"0px auto\",\n                        border: \"2px solid black\",\n                        position: \"relative\"\n                      }}\n                    >\n                      <video\n                        className=\"my-video\"\n                        id=\"my-video\"\n                        style={{\n                          width: \"130px\",\n                          position: \"absolute\",\n                          left: \"10px\",\n                          bottom: \"10px\",\n                          border: \"2px solid #0061ff\",\n                          zIndex: \"2\"\n                        }}\n                      />\n                      <video\n                        className=\"user-video\"\n                        id=\"user-video\"\n                        style={{\n                          position: \"absolute\",\n                          left: \"0\",\n                          right: \"0\",\n                          bottom: \"0\",\n                          top: \"0\",\n                          width: \"100%\",\n                          height: \"100%\",\n                          zIndex: \"1\"\n                        }}\n                      />\n                    </Container>\n                    <br />\n                    <Container style={{ width: \"500px\", margin: \"0px auto\" }}>\n                      {this.state.disableButton === false ? (\n                        <div>\n                          <Button\n                            animated\n                            floated=\"left\"\n                            onClick={this.takeSnapshot}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32%\"\n                            }}\n                          >\n                            <Button.Content visible>\n                              <Icon name=\"camera\" />\n                            </Button.Content>\n                            <Button.Content hidden>Snapshot</Button.Content>\n                          </Button>\n                          <Button\n                            animated\n                            loading={this.state.loading}\n                            floated=\"left\"\n                            onClick={this.sendOTP}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32.5%\"\n                            }}\n                          >\n                            <Button.Content visible>\n                              <Icon name=\"send\" color=\"green\" />\n                            </Button.Content>\n                            <Button.Content hidden>Send OTP</Button.Content>\n                          </Button>\n                          <Button\n                            animated\n                            loading={this.state.declineLoading}\n                            floated=\"left\"\n                            onClick={this.decline}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32.5%\"\n                            }}\n                          >\n                            <Button.Content visible>\n                              <Icon name=\"close\" color=\"red\" />\n                            </Button.Content>\n                            <Button.Content hidden>Quit Call</Button.Content>\n                          </Button>\n                          {this.state.isRecording ? \n                          <Icon style={{display: \"inline-block\"}} color=\"red\" loading name='spinner' />\n                          : null }\n                          <span>{this.state.snapshotMessage}</span>\n                        </div>\n                      ) : (\n                        <div>\n                          <Button\n                            animated\n                            floated=\"left\"\n                            onClick={this.takeSnapshot}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32.5%\"\n                            }}\n                            disabled\n                          >\n                            <Button.Content visible>\n                              <Icon name=\"camera\" />\n                            </Button.Content>\n                            <Button.Content hidden>Snapshot</Button.Content>\n                          </Button>\n                          <Button\n                            animated\n                            floated=\"left\"\n                            onClick={this.sendOTP}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32.5%\"\n                            }}\n                            disabled\n                          >\n                            <Button.Content visible>\n                              <Icon name=\"send\" color=\"green\" />\n                            </Button.Content>\n                            <Button.Content hidden>Send OTP</Button.Content>\n                          </Button>\n                          <Button\n                            animated\n                            floated=\"left\"\n                            onClick={this.decline}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32.5%\"\n                            }}\n                            disabled\n                          >\n                            <Button.Content visible>\n                              <Icon name=\"close\" color=\"red\" />\n                            </Button.Content>\n                            <Button.Content hidden>Quit Call</Button.Content>\n                          </Button>\n                          <span>{this.state.isRecording}</span>\n                        </div>\n                      )}\n                    </Container>\n                  </Grid.Column>\n                  <Grid.Column width=\"eight\">\n                    {this.state.img1 ? (\n                      <div>\n                        <Carousel\n                          ref={node => {\n                            this.carouselRef = node;\n                          }}\n                          dragging={false}\n                          slidesToShow={1}\n                          style={{ maxWidth: \"451px\", margin: \"auto\" }}\n                          renderBottomCenterControls={false}\n                        >\n                          <div onLoad={this.handleLoadImage}>\n                            <ReactCrop\n                              style={{\n                                width: \"451px\",\n                                height: \"287px\",\n                                margin: \"auto\"\n                              }}\n                              src={`../static/${this.state.img1}`}\n                              crop={this.state.crop}\n                              onChange={this.handleOnCropChange1}\n                              onImageLoaded={this.handleImageLoaded1}\n                              onComplete={this.handleOnCropComplete1}\n                            />\n                          </div>\n                          <div>\n                            <ReactCrop\n                              style={{\n                                width: \"451px\",\n                                height: \"287px\",\n                                margin: \"auto\"\n                              }}\n                              src={`../static/${this.state.img2}`}\n                              crop={this.state.crop}\n                              onChange={this.handleOnCropChange2}\n                              onImageLoaded={this.handleImageLoaded2}\n                              onComplete={this.handleOnCropComplete2}\n                            />\n                          </div>\n                        </Carousel>\n                        {this.state.showMrzValidationButton ? (\n                          <Container style={{ textAlign: \"center\" }}>\n                            <Button\n                              onClick={this.ocrScan}\n                              loading={this.state.loadingOCR}\n                            >\n                              Validate MRZ Code\n                            </Button>\n                          </Container>\n                        ) : null}\n                        <br />\n                        <canvas\n                          id=\"mrz-code\"\n                          ref={this.imageCropPreviewCanvasRef}\n                          style={{\n                            width: \"300%\",\n                            display: \"none\"\n                          }}\n                        />\n                        {this.state.idIsValid ? (\n                          <Message\n                            header={`Valid! Type: ${this.state.ocrFormat}`}\n                            success\n                            content={this.state.ocr}\n                            style={{\n                              width: \"75%\",\n                              marginLeft: \"12.5%\",\n                              boxShadow: \"1px 1px 11px green\",\n                              border: \"1px solid green\"\n                            }}\n                          />\n                        ) : this.state.idIsValid === false ? (\n                          <Message\n                            header={`Not Valid! Type: ${this.state.ocrFormat}`}\n                            success\n                            content={this.state.ocr}\n                            style={{\n                              boxShadow: \"1px 1px 11px red\",\n                              border: \"1px solid red\"\n                            }}\n                          />\n                        ) : null}\n                      </div>\n                    ) : null}\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                  <Grid.Column width=\"eight\">\n                    <Container\n                      style={{\n                        width: \"500px\",\n                        margin: \"0px auto\"\n                      }}\n                    >\n                      {userNames.map(userId => {\n                        return this.currentUser.id !== userId &&\n                          userNames != [] ? (\n                          <Button\n                            key={userId}\n                            animated\n                            floated=\"left\"\n                            key={userId}\n                            onClick={() => {\n                              this.callTo(userId);\n                              userName = userId;\n                            }}\n                            style={{\n                              backgroundColor: \"white\",\n                              border: \"1px solid black\",\n                              width: \"32.5%\"\n                            }}\n                          >\n                            <Button.Content visible>\n                              Call {userId}\n                            </Button.Content>\n                            <Button.Content hidden>\n                              <Icon name=\"phone\" color=\"blue\" />\n                            </Button.Content>\n                          </Button>\n                        ) : null;\n                      })}\n                    </Container>\n                    <canvas\n                      id=\"snapshot\"\n                      width=\"500\"\n                      height=\"300\"\n                      style={{\n                        display: \"none\"\n                      }}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width=\"eight\" />\n                </Grid.Row>\n              </Grid>\n            </Segment>\n          </div>\n        ) : (\n          //user list\n          <div>\n            {this.state.users.map(member => (\n              <Card\n                key={member.id}\n                raised\n                style={\n                  member.kycKey === \"declined\"\n                    ? {\n                        height: \"400x\",\n                        width: \"180px\",\n                        display: \"inline-block\",\n                        margin: \"18px\",\n                        border: \"1px solid red\"\n                      }\n                    : {\n                        height: \"400x\",\n                        width: \"180px\",\n                        display: \"inline-block\",\n                        margin: \"18px\"\n                      }\n                }\n              >\n                <Card.Content>\n                  {member.edited ? (\n                    <Icon\n                      name=\"circle thin\"\n                      size=\"small\"\n                      color=\"red\"\n                      style={{\n                        float: \"right\",\n                        marginRight: \"-21px\",\n                        marginTop: \"-19px\"\n                      }}\n                    />\n                  ) : null}\n                  <Card.Header>\n                    {member.username}\n                    {member.isRegistered == \"yes\" ? (\n                      <Icon\n                        name=\"checkmark\"\n                        color=\"green\"\n                        style={{ float: \"right\" }}\n                      />\n                    ) : (\n                      <Icon name=\"x\" color=\"red\" style={{ float: \"right\" }} />\n                    )}\n                  </Card.Header>\n                  <Card.Meta style={{ marginTop: \"2px\" }}>\n                    <span>Last Modified: {member.lastModified}</span>\n                  </Card.Meta>\n                  <Card.Description>\n                    {member.lname}, {member.fname}\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra style={{ textAlign: \"center\" }}>\n                  <Button onClick={this.selectUser.bind(this, member)}>\n                    View Profile\n                  </Button>\n                </Card.Content>\n              </Card>\n            ))}\n            {this.state.isChosen ? (\n              <Modal dimmer={dimmer} open={open} onClose={this.closeModal}>\n                <Modal.Header>\n                  Profile of {this.state.usrs[0].username}\n                </Modal.Header>\n                <Modal.Content image>\n                  <Modal.Description>\n                    <Form>\n                      <div>\n                        <Form.Group widths=\"equal\">\n                          <Form.Input\n                            readOnly\n                            fluid\n                            label=\"Username\"\n                            value={this.state.usrs[0].username}\n                          />\n                          <Form.Input\n                            readOnly\n                            fluid\n                            label=\"ID\"\n                            value={this.state.usrs[0].id}\n                          />\n                        </Form.Group>\n                        <Form.Group widths=\"equal\">\n                          <Form.Input\n                            readOnly\n                            fluid\n                            label=\"First Name\"\n                            value={this.state.usrs[0].fname}\n                          />\n                          <Form.Input\n                            readOnly\n                            fluid\n                            label=\"Last Name\"\n                            value={this.state.usrs[0].lname}\n                          />\n                        </Form.Group>\n                        {this.state.usrs[0].edited == \"address\" ? (\n                          <div>\n                            <Form.Group>\n                              <Form.Input\n                                error\n                                readOnly\n                                width=\"eleven\"\n                                fluid\n                                label=\"Street\"\n                                value={this.state.usrs[0].street}\n                              />\n                              <Form.Input\n                                error\n                                readOnly\n                                width=\"five\"\n                                fluid\n                                label=\"House Number\"\n                                value={this.state.usrs[0].houseNr}\n                              />\n                            </Form.Group>\n                            <Form.Group>\n                              <Form.Input\n                                error\n                                readOnly\n                                width=\"six\"\n                                fluid\n                                type=\"number\"\n                                label=\"Postal Code\"\n                                value={this.state.usrs[0].postCode}\n                              />\n                              <Form.Input\n                                error\n                                readOnly\n                                width=\"ten\"\n                                fluid\n                                label=\"Place of Residence\"\n                                value={this.state.usrs[0].placeOfRes}\n                              />\n                            </Form.Group>\n                          </div>\n                        ) : (\n                          <div>\n                            <Form.Group>\n                              <Form.Input\n                                readOnly\n                                width=\"eleven\"\n                                fluid\n                                label=\"Street\"\n                                value={this.state.usrs[0].street}\n                              />\n                              <Form.Input\n                                readOnly\n                                width=\"five\"\n                                fluid\n                                label=\"House Number\"\n                                value={this.state.usrs[0].houseNr}\n                              />\n                            </Form.Group>\n                            <Form.Group>\n                              <Form.Input\n                                readOnly\n                                width=\"six\"\n                                fluid\n                                type=\"number\"\n                                label=\"Postal Code\"\n                                value={this.state.usrs[0].postCode}\n                              />\n                              <Form.Input\n                                readOnly\n                                width=\"ten\"\n                                fluid\n                                label=\"Place of Residence\"\n                                value={this.state.usrs[0].placeOfRes}\n                              />\n                            </Form.Group>\n                          </div>\n                        )}\n                        <Form.Group widths=\"equal\">\n                          <Form.Input\n                            readOnly\n                            fluid\n                            label=\"Date of Birth\"\n                            value={this.state.usrs[0].dateOfBirth}\n                          />\n                          <Form.Input\n                            readOnly\n                            fluid\n                            label=\"Nationality\"\n                            value={this.state.usrs[0].nat}\n                          />\n                        </Form.Group>\n                        <Form.Group widths=\"equal\">\n                          {this.state.usrs[0].edited == \"email\" ? (\n                            <Form.Input\n                              error\n                              readOnly\n                              fluid\n                              label=\"Email\"\n                              type=\"email\"\n                              value={this.state.usrs[0].email}\n                            />\n                          ) : (\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"Email\"\n                              type=\"email\"\n                              value={this.state.usrs[0].email}\n                            />\n                          )}\n                          {this.state.usrs[0].edited == \"mobNr\" ? (\n                            <Form.Input\n                              error\n                              readOnly\n                              fluid\n                              label=\"Mobile Number\"\n                              type=\"number\"\n                              value={this.state.usrs[0].mobNr}\n                            />\n                          ) : (\n                            <Form.Input\n                              readOnly\n                              fluid\n                              label=\"Mobile Number\"\n                              type=\"number\"\n                              value={this.state.usrs[0].mobNr}\n                            />\n                          )}\n                        </Form.Group>\n                        <Form.Group width=\"sixteen\">\n                          <Form.Input\n                            width=\"sixteen\"\n                            readOnly\n                            fluid\n                            label=\"Registration Date\"\n                            value={this.state.usrs[0].regDate}\n                          />\n                        </Form.Group>\n                        {this.state.beneficialOwners.length > 0 ? (\n                          <Accordion>\n                            <Accordion.Title\n                              active={activeIndex === 0}\n                              index={0}\n                              onClick={this.handleAccordionClick}\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              <Icon name=\"dropdown\" />\n                              Beneficial Owners of the Assets\n                            </Accordion.Title>\n                            <Accordion.Content active={activeIndex === 0}>\n                              {this.state.beneficialOwners.map(\n                                beneficialOwner => (\n                                  <Segment>\n                                    <Form.Group widths=\"equal\">\n                                      <Form.Input\n                                        readOnly\n                                        fluid\n                                        label=\"First Name\"\n                                        value={beneficialOwner.ownerName}\n                                      />\n                                      <Form.Input\n                                        readOnly\n                                        fluid\n                                        label=\"Last Name\"\n                                        value={beneficialOwner.ownerLastName}\n                                      />\n                                    </Form.Group>\n                                    <Form.Group>\n                                      <Form.Input\n                                        readOnly\n                                        width=\"eleven\"\n                                        fluid\n                                        label=\"Street\"\n                                        value={beneficialOwner.ownerStreet}\n                                      />\n                                      <Form.Input\n                                        readOnly\n                                        width=\"five\"\n                                        fluid\n                                        label=\"House Number\"\n                                        value={beneficialOwner.ownerHouseNr}\n                                      />\n                                    </Form.Group>\n                                    <Form.Group>\n                                      <Form.Input\n                                        readOnly\n                                        width=\"six\"\n                                        fluid\n                                        label=\"Postal Code\"\n                                        value={beneficialOwner.ownerPostCode}\n                                      />\n                                      <Form.Input\n                                        readOnly\n                                        width=\"ten\"\n                                        fluid\n                                        label=\"Place of Residenz\"\n                                        value={beneficialOwner.ownerPlaceOfRes}\n                                      />\n                                    </Form.Group>\n                                    <Form.Group widths=\"equal\">\n                                      <Form.Input\n                                        readOnly\n                                        fluid\n                                        label=\"Date of Birth\"\n                                        value={beneficialOwner.ownerDateOfBirth}\n                                      />\n                                    </Form.Group>\n                                  </Segment>\n                                )\n                              )}\n                            </Accordion.Content>\n                          </Accordion>\n                        ) : null}\n                        <br />\n\n                        {this.state.ethAddresses.length > 0 ? (\n                          <p style={{ fontWeight: \"bold\" }}>\n                            EthAddresses which requested the KycKey\n                          </p>\n                        ) : null}\n\n                        {this.state.ethAddresses.map(ethAddress => (\n                          <Form.Group width=\"sixteen\">\n                            <Form.Input\n                              width=\"sixteen\"\n                              readOnly\n                              fluid\n                              value={ethAddress}\n                            />\n                          </Form.Group>\n                        ))}\n\n                        <p style={{ fontWeight: \"bold\" }}>Identity Card</p>\n                        <Form.Group\n                          widths=\"equal\"\n                          style={{ margin: \"0px auto\" }}\n                        >\n                          <a\n                            href={`../static/${this.state.usrs[0].ID1}`}\n                            target=\"_blank\"\n                            style={{ width: \"50%\" }}\n                          >\n                            <img\n                              className=\"img-responsive\"\n                              src={`../static/${this.state.usrs[0].ID1}`}\n                              style={{\n                                width: \"200px\",\n                                height: \"113px\"\n                                // float: \"left\"\n                              }}\n                            />\n                          </a>\n                          <a\n                            href={`../static/${this.state.usrs[0].ID2}`}\n                            target=\"_blank\"\n                            style={{ width: \"50%\" }}\n                          >\n                            <img\n                              className=\"img-responsive\"\n                              src={`../static/${this.state.usrs[0].ID2}`}\n                              style={{\n                                width: \"200px\",\n                                height: \"113px\"\n                              }}\n                            />\n                          </a>\n                          {this.state.usrs[0].snapshot ? (\n                            <a\n                              href={`../static/${this.state.usrs[0].snapshot}`}\n                              target=\"_blank\"\n                            >\n                              <img\n                                className=\"img-responsive\"\n                                src={`../static/${this.state.usrs[0].snapshot}`}\n                                style={{\n                                  width: \"200px\",\n                                  height: \"113px\"\n                                }}\n                              />\n                            </a>\n                          ) : null}\n                        </Form.Group>\n                        <br />\n                        <p style={{ fontWeight: \"bold\" }}>Audio Recording</p>\n                        <Form.Group colSpan={2}>\n                          <audio controls>\n                            <source\n                              src={`../static/${this.state.usrs[0].audio}`}\n                              type=\"audio/wav\"\n                            />\n                          </audio>\n                        </Form.Group>\n                        {this.state.usrs[0].isComp == \"1\" ? (\n                          <div>\n                            <Form.Group style={{ marginTop: \"10px\" }}>\n                              {this.state.usrs[0].edited == \"compName\" ? (\n                                <Form.Input\n                                  error\n                                  readOnly\n                                  width=\"sixteen\"\n                                  fluid\n                                  label=\"Company Name\"\n                                  value={this.state.usrs[0].compName}\n                                />\n                              ) : (\n                                <Form.Input\n                                  readOnly\n                                  width=\"sixteen\"\n                                  fluid\n                                  label=\"Company Name\"\n                                  value={this.state.usrs[0].compName}\n                                />\n                              )}\n                            </Form.Group>\n                            {this.state.usrs[0].edited == \"compAddress\" ? (\n                              <div>\n                                <Form.Group>\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"eleven\"\n                                    fluid\n                                    label=\"Business Address\"\n                                    value={this.state.usrs[0].businessAd}\n                                  />\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"five\"\n                                    fluid\n                                    label=\"House Number\"\n                                    value={this.state.usrs[0].compHouseNr}\n                                  />\n                                </Form.Group>\n                                <Form.Group widths=\"equal\">\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"six\"\n                                    fluid\n                                    label=\"Postal Code\"\n                                    value={this.state.usrs[0].compPostCode}\n                                  />\n                                  <Form.Input\n                                    error\n                                    readOnly\n                                    width=\"ten\"\n                                    fluid\n                                    label=\"Place of Residenz\"\n                                    value={this.state.usrs[0].residence}\n                                  />\n                                </Form.Group>\n                              </div>\n                            ) : (\n                              <div>\n                                <Form.Group>\n                                  <Form.Input\n                                    readOnly\n                                    width=\"eleven\"\n                                    fluid\n                                    label=\"Business Address\"\n                                    value={this.state.usrs[0].businessAd}\n                                  />\n                                  <Form.Input\n                                    readOnly\n                                    width=\"five\"\n                                    fluid\n                                    label=\"House Number\"\n                                    value={this.state.usrs[0].compHouseNr}\n                                  />\n                                </Form.Group>\n                                <Form.Group widths=\"equal\">\n                                  <Form.Input\n                                    readOnly\n                                    width=\"six\"\n                                    fluid\n                                    label=\"Postal Code\"\n                                    value={this.state.usrs[0].compPostCode}\n                                  />\n                                  <Form.Input\n                                    readOnly\n                                    width=\"ten\"\n                                    fluid\n                                    label=\"Place of Residenz\"\n                                    value={this.state.usrs[0].residence}\n                                  />\n                                </Form.Group>\n                              </div>\n                            )}\n                            <Form.Group\n                              width=\"sixteen\"\n                              style={{ margin: \"0px auto\" }}\n                            >\n                              <Icon name=\"linkify\" />\n                              <a\n                                href={`../static/${this.state.usrs[0].doc1}`}\n                                type=\"application/pdf\"\n                                target=\"_blank\"\n                              >\n                                View extract of the relevant registration\n                                authority\n                              </a>\n                            </Form.Group>\n                            <Form.Group\n                              width=\"sixteen\"\n                              style={{ margin: \"0px auto\" }}\n                            >\n                              <Icon name=\"linkify\" />\n                              <a\n                                href={`../static/${this.state.usrs[0].doc2}`}\n                                type=\"application/pdf\"\n                                target=\"_blank\"\n                              >\n                                View electronic copy of the power of attorney\n                              </a>\n                            </Form.Group>\n                          </div>\n                        ) : null}\n                      </div>\n                    </Form>\n                  </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                  <Container\n                    style={{ textAlign: \"center\", display: \"inline-block\" }}\n                  >\n                    <Button color=\"black\" onClick={this.closeModal}>\n                      Close\n                    </Button>\n                  </Container>\n                </Modal.Actions>\n              </Modal>\n            ) : null}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkGA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AADA;AACA;AAJA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAFA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnGA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAyHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AADA;AACA;AAJA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1HA;AA4IA;AAAA;AAAA;AAAA;AACA;AACA;AA9IA;AAiJA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxKA;AA2KA;AAAA;AAAA;AAAA;AACA;AACA;AA7KA;AA8KA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AArLA;AAwLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAHA;AACA;AAWA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AACA;AADA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AADA;AA3BA;AAAA;AACA;AADA;AA+BA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AAzCA;AA2CA;AACA;AACA;AArSA;AAuSA;AACA;AACA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA3VA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6VA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AATA;AAAA;AAaA;AADA;AACA;AAbA;AAUA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9VA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAwXA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AACA;AADA;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AAAA;AAAA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAzXA;AAAA;AAAA;AAAA;AAAA;AA2ZA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAYA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5ZA;AAwbA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA7dA;AAgeA;AAAA;AAAA;AACA;AACA;AAleA;AAqeA;AACA;AACA;AAveA;AA0eA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAhfA;AAmfA;AAAA;AAAA;AACA;AACA;AArfA;AAwfA;AACA;AACA;AA1fA;AA6fA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAngBA;AAsgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAWA;AACA;AACA;AA1hBA;AA6hBA;AACA;AACA;AA/hBA;AAAA;AAAA;AAAA;AAAA;AAmiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AARA;AAAA;AACA;AADA;AASA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAliBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAmBA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AAFA;AAKA;AAEA;AApCA;AAqCA;AACA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAiBA;AACA;;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAIA;AACA;;;AA4dA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AAgeA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAVA;AAeA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAaA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAeA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AACA;AACA;AADA;AAJA;AASA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAJA;AAZA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAeA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAtDA;AA6DA;AAAA;AAAA;AAAA;AAIA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAGA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAjDA;AAiEA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAFA;AAWA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAWA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAWA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAQA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AALA;AAaA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAgBA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAWA;;;;AAz7CA;AACA;;;;;A","sourceRoot":""}